{
	"version": "https://jsonfeed.org/version/1",
	"title": "Bloggus Doekmanni",
	"home_page_url": "https://blog.zanstra.com/",
	"feed_url": "https://blog.zanstra.com/feed.json",
	"description": "This is Bloggus Doekmanni, or Doekman's blog if you like. A bit of drivel about computer programming; some dead serious, some not so much...\n",
	"icon": "https://blog.zanstra.com/images/doekman-square.png",
	"author": { "name": "Doeke Zanstra"},
	"items": [  {
			"id": "/ict/2024/08/01/transfer-git-changes-with-a-pasteboard-workflow",
			"url": "https://blog.zanstra.com/ict/2024/08/01/transfer-git-changes-with-a-pasteboard-workflow.html",
			"title": "Transfer git Changes With a Pasteboard-Workflow",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Sometimes you want to transfer changes you made to a source tree from one computer to the other. The source tree on both computers are managed by <em>git</em>. One reason to do this, is because you tried something on your laptop. But you changed your mind, and want to work on a desktop computer with a big screen and real keyboard. And you don‚Äôt want to re-type everything.</p>\n\n<p>Another reason might be, because you debugged a problem on a production machine (I never do this, of course). The production machine only has readonly access to git. You want to secure these changes exactly, because they work.</p>\n\n<p>The commands are pretty simple, but I keep forgetting them. The commands use the diff format. If possible, I try not to create temporary files, because often they leave a mess. If the <strong>source machine</strong> is on MacOS, I use this command to secure patch:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git --no-pager diff | pbcopy\n</code></pre></div></div>\n\n<p>When on <em>Linux</em> via <em>ssh</em> in a <em>Terminal.app</em> window, I copy by hand:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git --no-pager diff\n# Press cmd+A to select output from last command, and press cmd+C to copy\n</code></pre></div></div>\n\n<p>With help of the universal clipboard, I can paste this on the <strong>target machine</strong>. But before I do that, I first check the status of the target repository:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Checking if the index is clean, and we are on the right branch\n$ git status\n# Now we can apply the patch\n$ pbpaste | git apply -\n</code></pre></div></div>\n\n<p>Now I can review and commit the changes, and push the changes to our origin. Normally I would use GitHub Desktop for this, because I like working with GUI‚Äôs for this kind of work.</p>\n\n<p>After pushing, we have to cleanup things on the <strong>source machine</strong>. With older git-versions, you didn‚Äôt need to reset the working folder. But since I don‚Äôt know when this is necessary:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Undo all the changes we secured in previous steps\n$ git reset --hard\n# Now get the changes \n$ git pull\n</code></pre></div></div>\n\n<p>Finally you might want to restart any processes that need restarting.</p>\n\n<p>You can of course use temporary files. <a href=\"https://appleinsider.com/inside/macos/tips/how-to-fix-universal-clipboard-problems-on-macos\">Files</a> <a href=\"https://discussions.apple.com/thread/7913125\">are</a> <a href=\"https://beebom.com/fix-universal-clipboard-not-working-iphone-mac/\">more</a> <a href=\"https://www.idownloadblog.com/2022/06/30/how-to-fix-universal-clipboard-not-working-on-iphone-ipad-mac/\">reliable</a> <a href=\"https://www.igeeksblog.com/universal-clipboard-not-working-between-mac-and-iphone/\">anyways</a>.</p>\n\n",
			"summary": "Sometimes you want to transfer changes you made to a source tree from one computer to the other. The source tree on both computers are managed by git. One reason to do this, is because you tried something on your laptop. But you changed your mind, and want to work on a desktop computer with a big screen and real keyboard. And you don‚Äôt want to re-type everything.",
			"date_published": "2024-08-01T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/ict/2024/05/14/google-oauth-invalid-grant-nightmare-and-how-i-fixed-it",
			"url": "https://blog.zanstra.com/ict/2024/05/14/google-oauth-invalid-grant-nightmare-and-how-i-fixed-it.html",
			"title": "Google OAuth \"Invalid-Grant\" Nightmare ‚Äî and How I Fixed It",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>I‚Äôm maintaining a couple of web applications, which use <em>login-with-google</em> for authentication. It also uses <em>OAuth</em> to access some of Google API‚Äôs. They are private applications, with less than 100 users.</p>\n\n<p>A while ago, one user reported an error with an application. Said user could log in, but when accessing a Google API, it would return the error ‚Äúinvalid-grant‚Äù.</p>\n\n<p>I tried a lot of things, but <a href=\"https://blog.timekit.io/google-oauth-invalid-grant-nightmare-and-how-to-fix-it-9f4efaf1da35\">this blog article</a> was most helpful (see also this <a href=\"https://stackoverflow.com/a/38433986/56\">Stack Overflow</a> entry). But solving the problem was not possible at the time. Nothing from the article worked. The user didn‚Äôt need to call the Google API since there was a workaround, so I left it at that.</p>\n\n<p>Months later, one direct collegue reported the same thing. Again, nothing I could think of or found on the internet seemed to work. This was more of a problem, since the collegue actually needed the functionality. And also, this not understood behaviour of OAuth was a ticking time bomb. And then, without an plain reason, I had an epiphany. Why not generate new credentials within the same project?</p>\n\n<p>It was worth a try. So I generated a <a href=\"https://support.google.com/cloud/answer/6158849?hl=en-GB\">new ‚ÄúOAuth 2.0 Client IDs‚Äù entry</a> within the Google Cloud console. In the database, I emptied the oauth-session table. I made a backup, so I could revert the change if necessary. I also emptied the web application‚Äôs session table in the database. Via this way, all users are forced to re-authenticate. The web session table doesn‚Äôt have important data in it, so in my case this was possible.</p>\n\n<p>And the fix worked well. Users did need to re-authenticate, but they didn‚Äôt need to grant permissions to use the app. I guess permissions are stored on project level, so this was not neccssary. It still is a bit unsatisfactory the underlying problem isn‚Äôt known, but I‚Äôm pretty happy the error is gone now.</p>\n\n",
			"summary": "I‚Äôm maintaining a couple of web applications, which use login-with-google for authentication. It also uses OAuth to access some of Google API‚Äôs. They are private applications, with less than 100 users.",
			"date_published": "2024-05-14T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/ict/2024/04/18/stylize-text-files-on-the-terminal-with-awkcss",
			"url": "https://blog.zanstra.com/ict/2024/04/18/stylize-text-files-on-the-terminal-with-awkcss.html",
			"title": "Stylize Text Files on the Terminal With awkcss",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Since I‚Äôve been introduced to UNIX, I‚Äôve been intrigued by the <em>awk</em> program. Most of the time when I use it, it‚Äôs to extract a value from a text file. Yet it can do so much more than that: it‚Äôs a full blown programming language. It‚Äôs a text processing language, which runs one or more pattern/action combinations:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pattern { action }\n...\n</code></pre></div></div>\n\n<p>When the pattern matches a line, the action is executed. But at a certain moment I realized the pattern/action-combo looked a lot like CSS. In CSS you have rules, which are made up by selectors and property assignments. <em>awk</em> also calls them rules. Selectors and properties. Patterns and actions. A light bulb üí° moment: <strong>awkcss</strong> was born.</p>\n\n<p>The pattern in awk can be seen as an expression which selects a line or not. In the actions part we can use function calls as property setters. So, what properties would be easy to set? I would like to show the capabilities of awkcss by providing some examples.</p>\n\n<p>Take for example this <code class=\"language-plaintext highlighter-rouge\">zebra.awkcss</code> stylesheet:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>NR % 2 == 1 { \n    color(black);\n    background_color(gray);\n}\nNR % 2 == 0 { \n    color(white);\n    background_color(black);\n}\n</code></pre></div></div>\n\n<p>To show the file <code class=\"language-plaintext highlighter-rouge\">README.md</code> with zebra stripes, run the following command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> $ awkcss -f zebra.awkcss README.md\n</code></pre></div></div>\n\n<p>The first pattern/action combo (‚Äúrule‚Äù) selects odd lines (in awk, the <code class=\"language-plaintext highlighter-rouge\">NR</code> variable contains the 1-based line number). For properties I‚Äôve created the <code class=\"language-plaintext highlighter-rouge\">color</code>- and <code class=\"language-plaintext highlighter-rouge\">background_color</code>-functions. As property values I‚Äôve used variables, although you can also use strings.</p>\n\n<p>About the naming convention: CSS claimed the <em>dash-separator</em>, and JavaScript is doing <em>camelCasing</em>. To differentiate awkcss from the CSS and JavaScript, I was forced to use <em>snake_casing</em> as a naming convention. Having the best readable CSS-dialect is considered a bonus.</p>\n\n<p>To create a simple MarkDown stylizer, checkout this <code class=\"language-plaintext highlighter-rouge\">markdown.awkcss</code> stylesheet:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>BEGIN {\n    width(72);\n}\n/^#+ / {\n    color(yellow);\n    font_weight(bold);\n}\n/^\\t| {4,}/ {\n    color(\"gray\");\n}\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">BEGIN</code>-rule sets the default width. It‚Äôs like the CSS <code class=\"language-plaintext highlighter-rouge\">*</code>-selector. The second rule matches any lines starting with a <code class=\"language-plaintext highlighter-rouge\">#</code>-sign to match MarkDown headings. And the third rule matches code-blocks, starting with a tab character, or 4 spaces.</p>\n\n<p>Suppose you don‚Äôt want to render code-blocks, you can use the <code class=\"language-plaintext highlighter-rouge\">display</code>-property with the <code class=\"language-plaintext highlighter-rouge\">none</code>-variable:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/^\\t| {4,}/ {\n    display(none); \n}\n</code></pre></div></div>\n\n<p>There is also a box-model:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/^&gt;/ {\n    block_name(\"block_quote\");\n    border(ascii);\n    border_style_left(none);\n}\n</code></pre></div></div>\n\n<p>This rule matches block quotes, and draws a border around it. Since a block quote already starts with a border-like character, the left border is set to <code class=\"language-plaintext highlighter-rouge\">none</code>.</p>\n\n<p>An issue with awk is that a pattern selects one line only. For inline-properties like <code class=\"language-plaintext highlighter-rouge\">color</code> this is not a problem. But we don‚Äôt want to draw a border around every line. We need a mechanism to draw a border around the whole block quote instead. For this the <code class=\"language-plaintext highlighter-rouge\">block_name</code> property can be used. All consecutive lines with the same block name are considered to be part of the same block.</p>\n\n<p>There is also support for media-queries:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/^\\t| {4,}/ {\n    color(\"gray\");\n}\n/^\\t| {4,}/ &amp;&amp; LINES &lt;= 25 {\n    white_space(pre);\n    text_overflow(ellipsis);\n}\n</code></pre></div></div>\n\n<p>This stylesheet renders MarkDown-code gray. For terminals with limited height, lines are not wrapped (default <code class=\"language-plaintext highlighter-rouge\">white_space</code> is <code class=\"language-plaintext highlighter-rouge\">pre_wrap</code>). And when the line overflows, it is truncated and an ellipsis (‚Ä¶) is shown at the end. Besides the <em>number of lines</em>, there are also variables for <em>number of columns</em> and <em>colors</em>.</p>\n\n<p>Finally, you can use some pseudo-elements as well:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/^#+ / {\n    color(bright_blue);\n}\n/^#+ / &amp;&amp; select(\"::after\") {\n    content(\"------------------------------------------------\");\n    select();\n}\n</code></pre></div></div>\n\n<p>This will display a line under every heading. Because of the way <code class=\"language-plaintext highlighter-rouge\">awk</code> works, the selector will need to be reset at the end of the rule by calling <code class=\"language-plaintext highlighter-rouge\">select</code> with no arguments. The inserted pseudo-element is block level, meaning it will insert a line below the heading. Of course, the <code class=\"language-plaintext highlighter-rouge\">::before</code> pseudo-element is also supported.</p>\n\n<p>Although I used MarkDown in this blog as an example, the use cases don‚Äôt stop there. It can be used to better inspect <code class=\"language-plaintext highlighter-rouge\">/etc/passwd</code> by hiding system accounts, printing comments gray and high lighting accounts.</p>\n\n<p>And I didn‚Äôt even touch everything. Check out the properties <code class=\"language-plaintext highlighter-rouge\">margin</code> (including margin-collapse), <code class=\"language-plaintext highlighter-rouge\">tab_size</code>, <code class=\"language-plaintext highlighter-rouge\">text_decoration</code> (both <code class=\"language-plaintext highlighter-rouge\">underline</code> and/or <code class=\"language-plaintext highlighter-rouge\">blink</code>) and <code class=\"language-plaintext highlighter-rouge\">width</code>: they are all documented in the <a href=\"https://github.com/doekman/awkcss/blob/main/reference.md\">AWKCSS Reference</a>.</p>\n\n<p>Getting started: Check out the <a href=\"https://github.com/doekman/awkcss/tree/main\">repository on GitHub</a>; the <code class=\"language-plaintext highlighter-rouge\">README.md</code> contains all information to get you started using awkcss!</p>\n\n<h2 id=\"how-does-this-all-work\">How Does This All Work</h2>\n\n<p>If you want to know exactly how <code class=\"language-plaintext highlighter-rouge\">awk</code> is called, just add the <code class=\"language-plaintext highlighter-rouge\">--debug</code> argument, and the command that would have been ran is displayed (<code class=\"language-plaintext highlighter-rouge\">¬ß</code> is the repository-home):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> $ awkcss --debug -f zebra.awkcss README.md\n awk -v COLS=180 -v LINES=50 -v COLORS=256 -f ¬ß/library.awk -f ¬ß/awkcss/defaults.awkcss \n     -f ¬ß/awkcss/examples/zebra.awkcss -f ¬ß/awkcss/render.awk README.md\n</code></pre></div></div>\n\n<p>The <a href=\"https://github.com/doekman/awkcss/blob/main/reference.md#awk-specific-information\">reference</a> also contains some technical information about this <code class=\"language-plaintext highlighter-rouge\">awk</code>-implementation. Finally, if you are interested in the source code, I suggest to check out the <a href=\"https://github.com/doekman/awkcss/tree/version-0.1\">version 0.1-branch</a> first. This contains the initial implementation without buffering and other more advanced stuff.</p>\n\n<p>There is still a lot left to be desired. There are bugs, more test coverage will be very helpful. But the biggest missing feature is table-support. After all, working with columns/cells (like <code class=\"language-plaintext highlighter-rouge\">$3</code>) is awk‚Äôs biggest feature. However, to implement support for that, the render engine needs to be re-architected. We‚Äôll see what the future holds.</p>\n\n",
			"summary": "Since I‚Äôve been introduced to UNIX, I‚Äôve been intrigued by the awk program. Most of the time when I use it, it‚Äôs to extract a value from a text file. Yet it can do so much more than that: it‚Äôs a full blown programming language. It‚Äôs a text processing language, which runs one or more pattern/action combinations:",
			"date_published": "2024-04-18T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/ict/2023/05/03/integer-exposed-rewrite",
			"url": "https://blog.zanstra.com/ict/2023/05/03/integer-exposed-rewrite.html",
			"title": "Integer Exposed Rewrite",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>For a company-internal web application I‚Äôve used <a href=\"https://github.com/stefanhaustein/notemplate\">NoTemplate.js</a> (disclosure: I‚Äôm a contributor to the project). It‚Äôs a minimal library for dynamically generating DOM nodes. And really like it. It hardly introduces abstractions. It wraps the W3C DOM API with a simple interface. And with ‚Äúsimple‚Äù I mean more JavaScriptesque, if that‚Äôs a word.</p>\n\n<p>The biggest reason to use <em>NoTemplate</em> was its simplicity. I probably won‚Äôt work much on this internal application, but when I do I don‚Äôt want to spend a lot of time getting up to speed. I won‚Äôt be working on it within 6 months, but it also can be 2 years. So I was happily surprised I‚Äôm not alone in wanting to keep things simple. See for example this piece about <a href=\"https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/\" title=\"Writing Javascript without a build system, by Julia Evans\">Writing Javascript without a build system</a>. So when Julia Evans wrote about her <a href=\"https://jvns.ca/blog/2023/04/19/new-playground-integer-exposed/\" title=\"New playground: integer.exposed, by Julia Evans\">new playground</a>, I got the idea to rewrite this playground with NoTemplate.</p>\n\n<p>With this blog, I try to show the process of this rewrite. Not sure if this is interesting. I do get technical, but I try only to mention the interesting and relevant bits. Well, let‚Äôs get on with it.</p>\n\n<h1 id=\"the-rewrite\">The Rewrite</h1>\n\n<p>In this part I‚Äôm going to explain how I approached the rewrite. The code is <a href=\"https://github.com/doekman/integer.exposed\">published on GitHub</a>, and every step is a commit in the git repository. I primary written this section as a way to prevent myself from writing the code, and end up not blogging about it. So if you don‚Äôt think this is interesting, you can skip to the next section. And when I say ‚Äúrewrite‚Äù, I probably should say ‚Äúrewire‚Äù. I reused most of the code from <code class=\"language-plaintext highlighter-rouge\">script.js</code> and only made minor changes.</p>\n\n<p>First step in the rewrite is to copy the source files and use these as a base for the rewrite. If you want, you can follow these steps on GitHub as I‚Äôve created a commit for every step <code class=\"language-plaintext highlighter-rouge\">(commit 11c34fa Initial)</code>.</p>\n\n<p>The first step is to replace the Vue library include with the NoTemplate one. I also emptied the script.js file. Now I look at the Vue template. It‚Äôs the HTML contained by the <code class=\"language-plaintext highlighter-rouge\">&lt;div id=\"app\"&gt;</code> tag/element. With NoTemplate, we write the view-template with JavaScript. So let‚Äôs first translate the HTML without the behavior (events).</p>\n\n<p>To keep things simple at this point, the UI will display 16 bit by default. Also, I only show the 16-bit pattern for now. And as I mentioned, the app is not interactive. The <code class=\"language-plaintext highlighter-rouge\">form</code>-method in <code class=\"language-plaintext highlighter-rouge\">script.js</code> generates the HTML view <code class=\"language-plaintext highlighter-rouge\">(commit 9551612 Static version)</code>.</p>\n\n<p>We want to render the view from values. For that, I introduced the <code class=\"language-plaintext highlighter-rouge\">state</code> property, and some  property getters. One thing to note is how the <em>bit pattern</em>-section is generated. With NoTemplate, everything is an expression. So first an array is created for every byte. Then this array is mapped to <code class=\"language-plaintext highlighter-rouge\">span</code>-elements.</p>\n\n<p>This version of the code doesn‚Äôt respond to dynamic input. But when you change the state-properties in an editor, the form reflects these new values. I tested some different values, and compared them to the output of the original version. Later I realized there are also <code class=\"language-plaintext highlighter-rouge\">span</code>-elements with the <code class=\"language-plaintext highlighter-rouge\">doublebyte</code>-class. I haven‚Äôt actually observed any different rendering without this class usage. So I skipped implementing them <code class=\"language-plaintext highlighter-rouge\">(commit d12e82f Dynamic state)</code>.</p>\n\n<p>And now the step to make it all interesting. Attaching event handlers, and all that is necessary. First I added the property setters and operator methods (not-, shift left-operator etcetera). When working on the event handlers for the text-inputs, I discovered an important disadvantage of using NoTemplate. Later in this blog I will elaborate on this. So with all the click, keyup and blur handlers in place, the rewrite is almost complete <code class=\"language-plaintext highlighter-rouge\">(commit 6d8b93f Event handlers)</code>.</p>\n\n<p>Until so far I didn‚Äôt notice the original script used an indent of two spaces, while I was using four. Since I copied most code, I now have mixed code. Let‚Äôs fix that now <code class=\"language-plaintext highlighter-rouge\">(commit fee5e6c Fix leading whitespace)</code>.</p>\n\n<p>The last part to write is to save the form state into the hash part of the URL. I had a little trouble understanding Vue, and how it handles changes of the hash. My initial code seemed to call the render-method twice. So I added the <code class=\"language-plaintext highlighter-rouge\">settingHash</code> property to prevent this. And I‚Äôve used the same code to set the state from the hash before the initial render <code class=\"language-plaintext highlighter-rouge\">(commit b7df8f1 Handling hash)</code>.</p>\n\n<p>While playing with the playground I missed a button to reset the display to zero. The playground resembles a calculator, so that must have been why I wanted to add it <code class=\"language-plaintext highlighter-rouge\">(commit 49a20c5 Clear operator)</code>.</p>\n\n<p><a href=\"https://blog.zanstra.com/integer.exposed/\">‚ñ∂Ô∏è</a> You can <a href=\"https://blog.zanstra.com/integer.exposed/\">play with the rewrite here</a>.</p>\n\n<p>About tooling, and especially the simple kind: I‚Äôve used <a href=\"https://blog.iconfactory.com/2022/06/worldwideweb-part-2/\">WorldWideWeb</a> for this project. It‚Äôs a simple, personal web server for macOS. It‚Äôs like <code class=\"language-plaintext highlighter-rouge\">python3 -m http.server</code>, but it has a GUI and it adds niceness. For example, it automatically reloads the webpage if one of the source files have changed.</p>\n\n<h1 id=\"comparison\">Comparison</h1>\n\n<p>How do the two implementations compare? For me, two things stand out. First, with Vue the view is rendered before JavaScript has ran because it‚Äôs HTML. With NoTemplate you can get a render flash, because JavaScript has to run before the form is displayed. But if you watch close, you might see a glimpse of several <code class=\"language-plaintext highlighter-rouge\">{{ bit }}</code> items at the bit pattern part in the Vue-app. You can see this better when you turn off JavaScript. With NoTemplate you can overcome this by rendering the form at compile time with some kind of build-system. But yeah, you‚Äôll need a build system then‚Ä¶</p>\n\n<p>But there is one problem with NoTemplate I don‚Äôt directly have a solution for. Let me explain. When a value in the application changes, NoTemplate renders the complete form and replaces the original form with the new one. While this might sound wasteful, in practice with small applications this is not a problem. Until I realized after a blur-event, the focus on the input element was lost (for example changing the signed value of the integer and pressing enter). And that is pretty annoying when you are using the keyboard.</p>\n\n<p>My first impulse is to solve this problem. I‚Äôm a programmer after all. But this is beyond the scope of this project. However, I will explore three solution directions. The first is to store what element has the focus into the application state. Now the focus can be set <em>after rendering</em> with a calls to <code class=\"language-plaintext highlighter-rouge\">setfocus()</code>. Or <em>during rendering</em> with the  <code class=\"language-plaintext highlighter-rouge\">autofocus</code>-attribute on the appropriate element.</p>\n\n<p>We can determine the current focussed element by calling <code class=\"language-plaintext highlighter-rouge\">document.activeElement</code>. But how do you serialize this into some string? Some kind of DOM-index would be problematic. In a templating system, the number of nodes can differ from render to render. When the element has an <code class=\"language-plaintext highlighter-rouge\">id</code>-attribute, this is not a problem. But this is not always the case. This could be solved by the NoTemplate library by generating <code class=\"language-plaintext highlighter-rouge\">id</code>-values for the DOM elements that can have the focus.</p>\n\n<p>Another problem to tackle is how to determine which element has the focus in all situations. When pressing tab from an input-element, the active element in the blur-event is <code class=\"language-plaintext highlighter-rouge\">document.body</code>. The same is true for the change-event. Not 100% sure why this is. It might be set at a later stage in the event pipeline.</p>\n\n<p>The second direction is not to replace the DOM-node, but to apply changes. Make some DOM diff thing. Not sure how this exactly would work, because event-handlers change too (there‚Äôs probably an NPM module for this). Not too fond of this idea.</p>\n\n<p>I guess the best direction would be just to encode the form in plain HTML, like it was 2002. Only the bit-pattern part is dynamic after all. This part could be generated by NoTemplate.js. And perhaps for attaching the events, I could create something like <a href=\"http://dean.edwards.name/jsb/\" title=\"JavaScript Bindings\">Dean Edwards JSB</a>. I always liked that idea too.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>It has been a fun project. The outcome is not completely what I wanted, but I learned a lot. The goal was not to create a working app, but to explore after all.</p>\n\n<p>I discovered that writing the blog while doing the project has a lot of advantages. It keeps me focussed, and it let me do a bit of work while being on the train. I hope this blog makes sense, and like to hear your thoughts on this topic.</p>\n\n<h1 id=\"update\">Update</h1>\n\n<p>Via <a href=\"https://mastodon.nl/@dukoid@mastodon.social/110329152286258188\">Mastodon</a> I got the tip to defer the blur-event handler, to find out the actual active element. I directly used <code class=\"language-plaintext highlighter-rouge\">setTimeout</code>, and I got the result I wanted: the <code class=\"language-plaintext highlighter-rouge\">activeElement</code> was the element I tabbed to.</p>\n\n<p>But since it‚Äôs not 2002 anymore, and <code class=\"language-plaintext highlighter-rouge\">setTimeout</code> feels like a hack I looked into promises. So I replaced <code class=\"language-plaintext highlighter-rouge\">setTimeout</code> with <code class=\"language-plaintext highlighter-rouge\">Promise.resolve(null).then</code>. But this didn‚Äôt work. The activeElement was document.body again‚Ä¶. What‚Äôs going on?</p>\n\n<p>After reading about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop\">the event loop</a> on MDN, I read about using promises, and found <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#task_queues_vs._microtasks\">this quote</a>:</p>\n\n<blockquote>\n  <p>Promise callbacks are handled as a microtask whereas setTimeout() callbacks are handled as task queues.</p>\n</blockquote>\n\n<p>Long story short: defering code with <code class=\"language-plaintext highlighter-rouge\">setTimeout</code> works because it‚Äôs a task, and not a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\">microtask</a>. My understanding is that a microtask would be ran right after the event-handler, while a task would be scheduled in the next iteration of the event loop. Apparently after the blur-handler, there is a task or microtask setting the activeElement. But now I know setTimeout is not as much as a hack I thought it was. It‚Äôs just wat I needed.</p>\n\n<p>So now we can make the render-method preserve the activeElement. To do so, I first gave every element that can be active an <code class=\"language-plaintext highlighter-rouge\">id</code>-attribute. And after that, I altered the render-method to remember and set the active element around the render. The render is wrapped within a setTimeout, so it is executed as a seperate task. I also used the optional chaining operator (<code class=\"language-plaintext highlighter-rouge\">?.</code>), because the activeElement can be <code class=\"language-plaintext highlighter-rouge\">null</code> and focusable elements may be disappear between renders.</p>\n\n<p>Also, I changed the <code class=\"language-plaintext highlighter-rouge\">blur</code>-events to <code class=\"language-plaintext highlighter-rouge\">change</code>, because we don‚Äôt need a render when a text-value hasn‚Äôt been changed. Also, I wanted to make all the controls accessible by the keyboard. So I changed the <code class=\"language-plaintext highlighter-rouge\">span</code>-items for the bit selector and the bit pattern to <code class=\"language-plaintext highlighter-rouge\">button</code> elements, and gave them an <code class=\"language-plaintext highlighter-rouge\">id</code>- and <code class=\"language-plaintext highlighter-rouge\">tabindex</code>-attribute. To fix their appearance, I only needed to set a couple of CSS properties. As value I used <code class=\"language-plaintext highlighter-rouge\">unset</code>, and it works like a charm. Now we can tab through all controls, and use the spacebar (or enter) to select or toggle them <code class=\"language-plaintext highlighter-rouge\">(commit e98e782 Retaining active element)</code>.</p>\n\n<p>On thing that still bugged me a bit were the bit buttons (pun not intended, but still enjoyed). In the user interface, they differ from the other controls (tab-bar, buttons, text inputs). On macOS, when pressing tab links are skipped. Only ‚Äúproper‚Äù controls get the focus. If you want the next link to get the focus, one can press option+tab (also known as alt+tab). So <code class=\"language-plaintext highlighter-rouge\">a</code>-elements for the bits seemed a better fit.</p>\n\n<p>But how should this work? A click handler would not suffice, I would need a keyboard-handler as well. And also <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#onclick_events\">MDN suggested to use buttons instead</a>. But then I realized, I just can use a hash-link, like <code class=\"language-plaintext highlighter-rouge\">&lt;a href=\"#0x01\"‚Ä¶</code>. When I supply the right value for the right bit, no additional scripting is needed. The <code class=\"language-plaintext highlighter-rouge\">hashchange</code>-handler will handle it all. And tabbing (or option-tabbing) to the elements, and pressing enter toggles the bit <code class=\"language-plaintext highlighter-rouge\">(commit xxx A@href bits)</code>.</p>\n\n<p>That‚Äôs it. With this addition I learned even more about JavaScript and the microtasks. Also, the playground is now a bit more accessible, and that‚Äôs nice.</p>\n\n",
			"summary": "For a company-internal web application I‚Äôve used NoTemplate.js (disclosure: I‚Äôm a contributor to the project). It‚Äôs a minimal library for dynamically generating DOM nodes. And really like it. It hardly introduces abstractions. It wraps the W3C DOM API with a simple interface. And with ‚Äúsimple‚Äù I mean more JavaScriptesque, if that‚Äôs a word.",
			"date_published": "2023-05-03T00:00:00+02:00",
			"date_modified": "2023-05-13T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/ict/2021/09/08/wat-heeft-archipunt-te-maken-met-de-ingenuity-mars-helicopter-",
			"url": "https://blog.zanstra.com/ict/2021/09/08/wat-heeft-archipunt-te-maken-met-de-ingenuity-mars-helicopter.html",
			"title": "Wat heeft Archipunt te maken met de Ingenuity Mars Helicopter?",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Op 30 april 2021 keek ik op <a href=\"https://github.com/doekman/\">m‚Äôn GitHub pagina</a>, en zag ik dat ik de volgende ‚Äúachievement‚Äù erbij had gekregen:</p>\n\n<blockquote>\n  <p><strong>Mars 2020 Helicopter Contributor</strong><br />\n<strong><a href=\"https://github.com/doekman/\">Doeke Zanstra</a></strong> contributed code to 1 repository used in the <a href=\"https://github.com/readme/nasa-ingenuity-helicopter\">Mars 2020 Helicopter Mission</a><br />\n<a href=\"https://github.com/pallets/werkzeug\">pallets/werkzeug</a></p>\n</blockquote>\n\n<p>Ik was echt <em>totaal</em> verbaasd. Hoe kan dit? Wat heb ik hieraan gedaan? Maar ik las de tekst hierboven nog een keer, en toen viel het kwartje bij me. Tijdens het werken bij <a href=\"https://archipunt.nl/\">Archipunt</a> heb ik aan software gewerkt wat ook gebruikt is bij het laten vliegen van een helicopter op Mars.</p>\n\n<p>OK. Dit behoeft enige toelichting.</p>\n\n<h2 id=\"apawa\">APAWA</h2>\n\n<p>Aan het eind van 2017 was ik bij Archipunt aan het werk aan <a href=\"https://apawa.archipunt.nl/\" title=\"Archipunt Piekgrond Acceleratie Web Applicatie.\">APAWA</a>. Dit is een <em>web-applicatie</em> voor het berekenen van het lokale effect (voor een specifiek adres dus) van aardbevingen. Ik kan hier verder uitleggen wat dat precies is, maar het is misschien gemakkelijker om voorgenoemde link te klikken en zelf een kijkje te nemen.</p>\n\n<p>Terloops noemde ik het woord ‚Äúweb-applicatie‚Äù: dit is de software van het internet. In feite een gewone applicatie, zoals bijvoorbeeld Microsoft Word, alleen dan voor het <em>web</em>.</p>\n\n<p>En die software was ik dus aan het schrijven. Maar om het wiel niet iedere keer opnieuw uit te vinden maak ik gebruik van software componenten. En voor het web-applicatie aspect van deze software maak ik gebruik van het <em>open source</em> component met de naam <a href=\"https://flask.palletsprojects.com/en/2.0.x/\">Flask</a>.</p>\n\n<p>Open source is erg handig. De broncode is beschikbaar. Zodat als je een fout tegenkomt, kun je deze analyseren. Meestal heb je zelf een fout gemaakt, en is de broncode handig om daar achter te komen. Heel, heel soms kom je iets tegen wat verbetering behoeft. Ook dan is open source handig: niet alleen de broncode is open, maar het hele proces is open. Ook verbeter trajecten. Voordat ik hier op in ga nog even het volgende.</p>\n\n<p>Flask zelf bestaat ook weer uit componenten. Ik liep tegen een onvolkomenheid aan in het component <em>Werkzeug</em> (overigens: zowel Flask als Werkzeug is niet in Amerika, maar bij onze Oosterburen bedacht).</p>\n\n<p>E√©n van de functionaliteiten van Werkzeug is het bepalen welke <em>browser</em> (zoals Chrome, Safari of Firefox) een eind-gebruiker gebruikt. In een moderne applicatie wil je niet dat er een gedateerde browser gebruikt: de belangrijkste reden hiervoor is om de test-inspanning niet te groot te laten worden.</p>\n\n<p>Nu was er een gebruiker die <em>Microsoft Edge</em> (de opvolger van Internet Explorer) gebruikte. En deze werd niet herkend door <em>Werkzeug</em>, en dus ook niet door Apawa. Edge maakt onder water gebruik van hetzelfde component als Chrome, en is dus modern. Reden om Edge toe te voegen. Als je wilt zien hoe dit er exact uit ziet, <a href=\"https://github.com/pallets/werkzeug/pull/1216\" title=\"Pull Request om edge browser detectie aan Werkzeug toe te voegen\">kijk dan hier</a> voor de details.</p>\n\n<p>Tot hier heb ik uitgelegd hoe software ontwikkeling kan leiden tot een toevoeging van een open source component. Maar wat heeft dit met Helicopters, Mars en NASA te maken?</p>\n\n<h2 id=\"helicopters-mars-en-nasa\">Helicopters, Mars en NASA</h2>\n\n<p>Laat ik om te beginnen verwijzen naar het Engelstalige artikel <a href=\"https://github.com/readme/nasa-ingenuity-helicopter\">Open Source on Mars: Community powers NASA‚Äôs Ingenuity Helicopter</a>. Erg interessant om te lezen. NASA maakt dus gebruik van open source code. Waarschijnlijk worden <em>Flask</em> en dus ook <em>Werkzeug</em> gebruikt bij <em>ground control</em> om de helicopter aan te sturen.</p>\n\n<p>In het stuk valt ook te lezen hoe men bepaald heeft welke software gebruikt werd voor het project. NASA heeft een lijst van componenten en hun versienummers aangeleverd aan GitHub, de centrale plek waar open source opgeslagen wordt.</p>\n\n<p>Omdat open source ontwikkeling zich in de openbaarheid voltrekt, kan elke wijziging in open source code gekoppeld worden aan een identiteit. De lijst van componenten en hun versienummers levert dan ook een √©√©nduidige lijst op van namen. Mijn wijziging is opgenomen in <em>Werkzeug versie 0.14</em> en voor Ingenuity wordt versie 0.16 gebruikt. Inmiddels is versie 2.0.0 net uit. Degene die aan versies na 0.16 hebben bijgedragen worden derhalve niet genoemd bij de ‚Äúachievement‚Äù. Maar wellicht wordt deze code in toekomstige missies gebruikt.</p>\n\n<p>Ik vond het leuk om achter dit feit te komen, en uit te zoeken hoe het precies zit. En ik hoop in de toekomst nog aan andere projecten te kunnen bijdragen.</p>\n\n<div class=\"postscript\"><span>Eerder gepubliceert</span> als <a href=\"https://www.archipunt.nl/archipunt-op-mars/\">Archipunt op Mars</a>.</div>\n\n",
			"summary": "Op 30 april 2021 keek ik op m‚Äôn GitHub pagina, en zag ik dat ik de volgende ‚Äúachievement‚Äù erbij had gekregen:",
			"date_published": "2021-09-08T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/ict/2021/04/12/a-closure-explanation",
			"url": "https://blog.zanstra.com/ict/2021/04/12/a-closure-explanation.html",
			"title": "One Closure Explanation",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Closures in programming languages are pretty intuitive to use. Understand what they are is actually a bit more difficult.</p>\n\n<p>A closure is a function, but not a regular function. And to better understand closures, it helps me to understand regular functions. So first I explain how regular functions work. After that I‚Äôll make the connection to functional closures.</p>\n\n<h2 id=\"regular-functions\">Regular functions</h2>\n\n<p>When you call a regular function, a lot of things are going on. Under the hood a stack-structure is used.\nThings the function needs, like arguments and the return address, get pushed up this stack. This is a bit of a simplification. There are optimising compilers, but I want explain the principle here. If you want to delve into the nitty-gritty details, please checkout <a href=\"https://en.wikipedia.org/wiki/Calling_convention\">calling conventions</a> on Wikipedia.</p>\n\n<p>So how does this work, what gets pushed up our stack-for-algorithmic-purposes? Let‚Äôs explain this with a JavaScript example.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: function test(a, b) {\n2: \tvar c = a + b;\n3: \tconsole.info('The sum of %s + %s is %s', a, b, c);\n4: }\n5: test(1, 2);\n</code></pre></div></div>\n\n<p>The program runs the following steps.</p>\n\n<ul>\n  <li>Before calling <code class=\"language-plaintext highlighter-rouge\">test</code>, the return address is pushed onto the stack. With this info, the function knows where to ‚Äúreturn‚Äù to. So let‚Äôs push the address of <code class=\"language-plaintext highlighter-rouge\">line 5</code> onto the stack.</li>\n  <li>After that, the arguments <code class=\"language-plaintext highlighter-rouge\">1</code> and <code class=\"language-plaintext highlighter-rouge\">2</code> are pushed onto the stack. Now there are 3 items on the stack.</li>\n  <li>Now we actually can start running the function. This is done via a jump to the entry point of the function, like <code class=\"language-plaintext highlighter-rouge\">goto line 1</code>. I will indent steps that are within the function call:\n    <ul>\n      <li>At line 1 there is nothing to do.</li>\n      <li>At line 2, there is some arithmetic, and the result is stored in the <em>local variable</em> <code class=\"language-plaintext highlighter-rouge\">c</code>. Locals are stored on the stack too, so <code class=\"language-plaintext highlighter-rouge\">3</code> will get pushed onto the stack, and we have 4 items on the stack.</li>\n      <li>Line 3 will print a line to the console, while referencing three items on the stack.</li>\n      <li>At line 4, the function returns. All local variables, arguments and return address are popped from the stack. The return address is used to jump back to (the end of) line 5.</li>\n    </ul>\n  </li>\n  <li>And at that point there is no more code to execute, and our program has finished running.</li>\n</ul>\n\n<p>At first glance this may seem a bit tedious and boring. Yet, some smart stuff is going on. When the function returned at line 4, all local variables, arguments and return address have been cleaned up. No need for <em>garbage collection</em> or <em>reference counting</em>. Very efficient.</p>\n\n<p>And it works pretty well when calling other functions or even with recursive calls. The stack-size is the limit! Only a stack-overflow comes after that, but that is about it.</p>\n\n<p>And yes, I left out handling return values, stack pointers and reference types. We do not need to worry about those for this explanation.</p>\n\n<p>To summarise: arguments and local variables live on the stack. They only exist between function entry and exit. In regular functions, that is.</p>\n\n<h2 id=\"first-class-functions\">First class functions</h2>\n\n<p>Before we go to closures, it is important to know what <em>first class functions</em> are. JavaScript has them, but what defines them? At first you might think <em>nesting functions</em> is a property of first class functions, but it is not. Turbo Pascal <a href=\"https://twitter.com/doekezanstra/status/1380426215757070336\">supports inner functions</a>, yet it doesn‚Äôt have support for first class functions.</p>\n\n<p>When you can assign a function to a variable, the language supports functions as a first class citizen. It should be no different as assigning an integer or a string to a variable.</p>\n\n<p>And when you can assign a function to a variable, you also can pass them around to other functions. Or let functions <em>return</em> functions or assign functions to data structures. This also seems reasonable, but Turbo Pascal can‚Äôt do this. For that one needs something extra.</p>\n\n<h2 id=\"functional-closures\">Functional closures</h2>\n\n<p>So let us explore functional closures. By the way: <em>closure</em>, <em>lexical closure</em> or <em>function closure</em>; all the same thing. Take the following example:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function test_two(a, b) {\n\tvar c = a + b;\n\treturn function inner() {\n\t\tconsole.info('The sum of %s + %s is %s', a, b, c);\n\t}\n}\nvar result = test_two(1, 2);\n</code></pre></div></div>\n\n<p>The function <code class=\"language-plaintext highlighter-rouge\">test_two</code> returns a nested function, which is assigned to the variable <code class=\"language-plaintext highlighter-rouge\">result</code>. So you would expect to execute the inner function by running <code class=\"language-plaintext highlighter-rouge\">result()</code>. And this indeed works in JavaScript.</p>\n\n<p>But, when you think of the stack-based system of regular functions, as described above, something is off. The stack-algorithm says when the function <code class=\"language-plaintext highlighter-rouge\">test_two</code> returns, the arguments <code class=\"language-plaintext highlighter-rouge\">a</code> and <code class=\"language-plaintext highlighter-rouge\">b</code> and variable <code class=\"language-plaintext highlighter-rouge\">c</code> are popped from the stack, and would not be accessible anymore. A call to the inner function would refer to variables that don‚Äôt exist anymore!</p>\n\n<p>Functional closures solve this. I like to think of a closure as function with a shopping bag that contains all the variables (state) which are necessary to perform its function. So the variable <code class=\"language-plaintext highlighter-rouge\">result</code> contains a reference to the function <code class=\"language-plaintext highlighter-rouge\">test_two</code> together with a bag with values for <code class=\"language-plaintext highlighter-rouge\">a</code>, <code class=\"language-plaintext highlighter-rouge\">b</code> and <code class=\"language-plaintext highlighter-rouge\">c</code>.</p>\n\n<p>When you would run <code class=\"language-plaintext highlighter-rouge\">var result2 = test_two(3, 4)</code>, the variable <code class=\"language-plaintext highlighter-rouge\">result2</code> will not contain the same thing as <code class=\"language-plaintext highlighter-rouge\">result</code>. The reference to the function is the same, but this closure has its own bag of state.</p>\n\n<p>How exactly this is implemented is not important for my explanation. Different languages do implement this behaviour differently, but the principle is the same. I found some more <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#closure_scope_chain\">technical info about JavaScript closures on MDN</a>, and also a blog about <a href=\"https://vkontech.com/the-intuitive-guide-to-understanding-closures-in-c/\">C# closures</a>.</p>\n\n<p>The Wikipedia article <a href=\"https://en.wikipedia.org/wiki/Closure_(computer_programming)\">on closures</a> has the line <em>‚ÄúOperationally, a closure is a record storing a function together with an environment.‚Äù</em> in the introduction. That summarises the point of my explanation pretty well. I hope you now have a better understanding of closures. Let me know what you think.</p>\n\n",
			"summary": "Closures in programming languages are pretty intuitive to use. Understand what they are is actually a bit more difficult.",
			"date_published": "2021-04-12T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2021/01/31/Building-Another-Blog-Engine",
			"url": "https://blog.zanstra.com/2021/01/31/Building-Another-Blog-Engine.html",
			"title": "Building Another Blog Engine",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>I have some ideas for a blog engine I want to explore. Instead of creating a new website, I‚Äôm planning to make incremental changes/improvements to this website. Baby steps. That‚Äôs why I‚Äôve named this project BABE: Building Another Blog Engine.</p>\n\n<p>At the moment I‚Äôm using GitHub Pages for this blog. When I push a commit, GitHub schedules a task of transforming the source via Jekyll. And the resulting files live somewhere on a webserver. It‚Äôs convenient, but it doesn‚Äôt give me the control I need.</p>\n\n<p>Step one is to build the website local, and push the resulting files to GitHub. I don‚Äôt want to create another repository for the build result, as this adds confusion. Fortunate, <em>git</em> has a nice solution for this. Create a branch for Jekyll‚Äôs build result, and tell GitHub Pages to serve the website from there.</p>\n\n<p>I‚Äôm using the branch feature in an unusual way: it is not intended for merging into the main branch. And this way, the published source doesn‚Äôt show up in my blog‚Äôs history.</p>\n\n<p>This branch should contain no files other than the build result. The obvious choice to do this would be to create a branch and remove all files. But why not use the powers of <em>git</em> and create a branch from the initial commit, way in the past!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>initial_hash=$(git rev-list HEAD | tail -n 1)\ngit branch web-stek $initial_hash\n</code></pre></div></div>\n\n<p>We now have an (almost) empty branch. How do we get the output from Jekyll‚Äôs build command to this branch?</p>\n\n<p>One way might be by having the ignored folder <code class=\"language-plaintext highlighter-rouge\">_site</code> (which contains the Jekyll build result) on the <em>master</em> branch. Somehow  bring the changes to the <em>web-stek</em> branch by switching branches. That would work with new files, but I don‚Äôt know how to transfer <em>modified</em> files this way.</p>\n\n<p>Two alternatives come to mind. Either use two <em>git</em> repositories on the same machine in different folders. Or use an intermediate folder for Jekyll‚Äôs build result. For simplicity and less confusion, I‚Äôve chosen to work with an intermediate folder.</p>\n\n<p>In the example below, <em>rsync</em> transfers the build result to the <code class=\"language-plaintext highlighter-rouge\">/docs</code> folder instead of <code class=\"language-plaintext highlighter-rouge\">/_site</code>. I‚Äôve changed the name, because <code class=\"language-plaintext highlighter-rouge\">/_site</code> is not listed with the settings for the <a href=\"https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\">publication source</a> on GitHub Pages. So <code class=\"language-plaintext highlighter-rouge\">/docs</code> it is. The build process works like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jekyll build --destination \"$jekyll_build\"\ngit checkout web-stek\nrsync -av \"$jekyll_build\" ./docs/\n</code></pre></div></div>\n\n<p>To finish up, I need to add the folders <code class=\"language-plaintext highlighter-rouge\">.jekyll-cache</code> and <code class=\"language-plaintext highlighter-rouge\">.sass-cache</code> to the <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file on the <em>web-stek</em> branch. Also, some empty folders might be there, because git only works with actual files. Finally, you might want to remove the files from the initial commit in the branch.</p>\n\n<p>I compared the result in <code class=\"language-plaintext highlighter-rouge\">/docs</code> with GitHub‚Äôs copy by fetching the pages via <code class=\"language-plaintext highlighter-rouge\">wget -r https\\://blog.zanstra.com</code>. I only found one major difference. GitHub Pages would normalizes time-zone offsets to zero. That might be an issue for RSS readers, but I can live with it.</p>\n\n<p>So after pushing all this, and setting up the publication source you are good to go. The next step is to automate publishing, but that has to wait for an other time.</p>\n\n<p><strong>UPDATED 2021-04-06</strong>: A bit mind-bending, but the <em>publication source</em> is considered to be in Jekyll format. How I learned this? I wanted the folder <code class=\"language-plaintext highlighter-rouge\">.well-known</code> to be copied to my website, but Jekyll ignored this file. Hidden files are on the ignore list. Luckily there is an easy fix. Add a file at the root of your site called <code class=\"language-plaintext highlighter-rouge\">.nojekyll</code>. The file can be empty.</p>\n\n",
			"summary": "I have some ideas for a blog engine I want to explore. Instead of creating a new website, I‚Äôm planning to make incremental changes/improvements to this website. Baby steps. That‚Äôs why I‚Äôve named this project BABE: Building Another Blog Engine.",
			"date_published": "2021-01-31T00:00:00+01:00",
			"tags": []
		},
		 {
			"id": "/2021/01/11/go-jamf-pro",
			"url": "https://blog.zanstra.com/2021/01/11/go-jamf-pro.html",
			"title": "Moving away from Server.app to Jamf Pro",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>At <a href=\"https://archipunt.nl\">Archipunt</a> we manage around 100 <em>macOS</em> computers. We used to manage them via <em>Server.app</em>. Because of several reasons, we now are moving to an all-MDM solution with Jamf Pro.</p>\n\n<p>To migrate the computers, we identified the following things to be fixed on these computers:</p>\n\n<ul>\n  <li>The registration to Server.app‚Äôs <em>Network Account</em> server needs to be removed</li>\n  <li>After this, some cleanup needs to be done in the computers local directory</li>\n  <li>Since password authentication was done via Server.app, the <em>mobile account</em> need to be migrated to a <em>local account</em></li>\n  <li>Some computers used Server.app‚Äôs MDM solution. When still present, old profiles need to be removed</li>\n  <li>Most computers are registered via DEP, so enrolment needs to be renewed in order to configure the to be managed via Jamf Pro.</li>\n</ul>\n\n<p>Because of COVID-19, most computers need to be migrated by the users themselves at home. Luckily, all users have elevated privileges. Otherwise, this migration would take a lot more time on our side.</p>\n\n<p>To migration will be done by a custom application. The GUI part will be written in AppleScript because it is so well suited for this. The actual migration is done via a shell-script. I couldn‚Äôt have written this without the <a href=\"https://github.com/rtrouton/rtrouton_scripts/blob/master/rtrouton_scripts/migrate_ad_mobile_account_to_local_account/MigrateADMobileAccounttoLocalAccount.command\">this script by Rich Trouton</a>: I made it work with Open Directory (which Server.app users), instead of Active Directory. Another post that helped enormously was this <a href=\"https://www.reddit.com/r/macsysadmin/comments/c97zgf/removing_apsdkeychain_to_enroll_devices_in_dep/\">check and fix for an expired Apple Push Service Delivery certificate</a>.</p>\n\n<p>I designed the shell-script via a ‚Äúcheck-fix‚Äù strategy: I first check if something needs to be fixed, and if so, fix it. For example, first I check if the machine is linked to a network account server. If so, the link is disconnected. This way, the script can be run as often as one wants without breaking stuff. Most items about are coded via a check/fix pair. An added advantage is separate parts can easily be tested.</p>\n\n<p>It‚Äôs also handy in the case the machine has to be rebooted. After that, just run the script again, and it factually starts where it was before the computer was rebooted.</p>\n\n<p>The AppleScript front-end handles the start screen and the request for the elevated privileges. When an error occurs within the shell-script, the user is advised about this and the log file is shown in the finder. I reserved exit-code 199 via which the shell-script can tell AppleScript the computer needs to be rebooted.</p>\n\n<p>To test the AppleScript without running the actual migration shell-script, I used the user defaults system. By writing a key/value pair to the application bundle domain (<code class=\"language-plaintext highlighter-rouge\">defaults write  nl.archipunt.public.go-jamf-pro test -string \"PASS\"</code>) the test-application‚Äôs behaviour can be influenced. When the key is not present, the actual migration code will be used.</p>\n\n<p>For source-code, please check out <a href=\"https://bitbucket.org/archipunt/go-jamf-pro/src/master/\">the repository</a> on bitbucket.</p>\n\n<p>About implementation: we first asked a small group of users to test the script, so we could detect common problems early and fix them. This worked very well. After errors from this initial group were fixed, most errors we experienced where plain user errors and could be handled via the phone very quickly.</p>\n\n<p>The hardest error to fix was a user who just didn‚Äôt get the enrolment notification. Turned out, the user accidentally had switched on <em>do not distrub</em>. And also had no idea that option existed‚Ä¶</p>\n\n",
			"summary": "At Archipunt we manage around 100 macOS computers. We used to manage them via Server.app. Because of several reasons, we now are moving to an all-MDM solution with Jamf Pro.",
			"date_published": "2021-01-11T00:00:00+01:00",
			"tags": []
		},
		 {
			"id": "/2020/10/05/Pretty-printing-JSON-with-a-twist",
			"url": "https://blog.zanstra.com/2020/10/05/Pretty-printing-JSON-with-a-twist.html",
			"title": "Pretty Print JSON with a Twist",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p><strong>TLDR;</strong> You can pretty print JSON in a <em>different manner</em>. <a href=\"https://zanstra.com/my/Json-pp.html\">Try it here</a>.</p>\n\n<p>My second programming language was Turbo Pascal (first one GW-Basic). From a BBS-pal I learned a notation in Pascal that has the <em>semicolon</em> at the <em>start</em> of the line, instead of at the end of the line, as most people did. Sometimes I still apply the same formatting to JSON.</p>\n\n<p>In this blog, I want to explore how such formatting can be done using Python and JavaScript. Just for the record: Pascal uses semicolons as statement <em>separator</em>, where as languages like C use them as statement <em>terminator</em>. JSON shares this behaviour with Pascal.</p>\n\n<p>To make clear what I want, here‚Äôs an example JSON file in the desired layout:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{ \"type\": \"pedant\"\n, \"enabled\": true\n, \"tags\":\n  [ \"nag\"\n  , \"prick\"\n  , \"pin\"\n  ]\n, \"data\":\n  { \"test\": 123\n  , \"cooperate\": null\n  }\n}\n</code></pre></div></div>\n\n<p>At first it looks pretty weird. However, there is an obvious advantage. You can visually follow the nesting-level of the data-structure in any editor. And you never place a comma too many.</p>\n\n<p>But <strong><em>why</em></strong> would one with a sane mind want to do this? Well, for starters because it is interesting. And also fight the orthodoxy. And it‚Äôs an ideal project to learn something new along the way.</p>\n\n<p>Anyways. Python‚Äôs json module provides a <a href=\"https://docs.python.org/3.8/library/json.html#json.dump\">dump</a>-method to convert a native data-structure to JSON:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>import json\ndata = {'type': 'pedant', 'enabled': True, 'tags': ['nag', 'prick', 'pin'], 'data': {'test': 123, 'cooperate': None}}\njson = json.dumps(data, indent=2)\nprint(json)\n</code></pre></div></div>\n\n<p>When you run this, it will print out the formatted JSON below.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"type\": \"pedant\",\n  \"enabled\": true,\n  \"tags\": [\n    \"nag\",\n    \"prick\",\n    \"pin\"\n  ],\n  \"data\": {\n    \"test\": 123,\n    \"cooperate\": null\n  }\n}\n</code></pre></div></div>\n\n<p>To better understand what‚Äôs happening, I visualized this formatting by adding colored borders.</p>\n\n<html><style>\n\t.JSON { font: 15px/1.5 monospace; border:1px solid #e8e8e8; background:#f8f8f8; padding: 8px 12px; margin-bottom:15px; }\n\t.indent-color { border:1px solid blue;}\n\t.indent { border:1px solid blue; display:inline-block;width:3ex;height:1em;}\n\t.sep1 { border:1px solid green; white-space: pre}\n\t.sep2 { border:1px solid green; white-space: pre}\n\t.NL1-color { border:1px solid red;}\n\t.NL1 span:last-of-type { border-right:2px solid red;}\n\t/*.NL2 { border-left:2px solid orange;}*/\n</style><div class=\"JSON\">\n\t<div class=\"NL1\"><span>{</span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span>\"type\"<span class=\"sep2\">: </span>\"pedant\"<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span>\"enabled\"<span class=\"sep2\">: </span>true<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span>\"tags\"<span class=\"sep2\">: </span><span>[</span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span class=\"indent\"> </span>\"nag\"<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span class=\"indent\"> </span>\"prick\"<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span class=\"indent\"> </span><span>\"pin\"</span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span>]<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span>\"data\"<span class=\"sep2\">: </span><span>{</span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span class=\"indent\"> </span>\"test\"<span class=\"sep2\">: </span>123<span class=\"sep1\">, </span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span class=\"indent\"> </span>\"cooperate\"<span class=\"sep2\">: </span><span>null</span></div>\n\t<div class=\"NL1\"><span class=\"NL2 indent\"> </span><span>}</span></div>\n\t<div class=\"NL1\"><span>}</span></div>\n</div></html>\n\n<p><span class=\"indent-color\">blue</span> Providing the <code class=\"language-plaintext highlighter-rouge\">indent</code> argument will kick-off the pretty printing. A positive integer will indent that many spaces per level. If you provide a string, that value is being used per indent-level. In this example I specified two spaces.</p>\n\n<p><span class=\"NL1-color\">red</span> If <code class=\"language-plaintext highlighter-rouge\">indent</code> is specified, a newline will be inserted just before the indentation.</p>\n\n<p><span class=\"sep1\">green</span> You can also change the separator behavior. From the documentation: <em>‚ÄúIf specified, separators should be an <code class=\"language-plaintext highlighter-rouge\">(item_separator, key_separator)</code> tuple‚Äù</em>. So by providing the tuple <code class=\"language-plaintext highlighter-rouge\">(';', ': ')</code> for <code class=\"language-plaintext highlighter-rouge\">separators</code>, one could create <em>European JSON</em>. Here I provide a semi-colon instead of a comma, which is obviously not valid JSON. So just be aware, you could produce invalid JSON with this option. However, when <code class=\"language-plaintext highlighter-rouge\">indent</code> is specified, the tuple <code class=\"language-plaintext highlighter-rouge\">(', ', ': ')</code> is automatically used, adding spaces after both separators.</p>\n\n<p>So, these arguments were a bit of a disappointment. It didn‚Äôt seem possible to format the JSON the way I wanted it.</p>\n\n<p>However, the API provides another option. We could specify a custom <a href=\"https://github.com/python/cpython/blob/3.8/Lib/json/encoder.py\">JSONEncoder</a> subclass via the <code class=\"language-plaintext highlighter-rouge\">cls</code> argument (you can inspect the code I linked to). This class is heavily optimized and caters for all sorts of requirements. I made a copy of the code, and made some modifications. It just seemed like a lot of work. The code is not really designed for reuse (for example: encoding value types, like boolean, are duplicated multiple times), so I decided to take a different route to a solution at this time.</p>\n\n<p>Look at the color-coded JSON above. What if we replaced <code><span class=\"sep1\">comma</span> <span class=\"NL1-color\">newline</span> <span class=\"indent-color\">indent</span></code> by <code><span class=\"NL1-color\">newline</span> <span class=\"indent-color\">indent</span> <span class=\"sep1\">comma</span></code>? Yes, I‚Äôm talking string-replacement. Any newline in JSON can safely be recognized as whitespace, since newlines in strings are always encoded like <code class=\"language-plaintext highlighter-rouge\">\\n</code> (or when reading code, the newline <code class=\"language-plaintext highlighter-rouge\">\\n</code> is encoded as <code class=\"language-plaintext highlighter-rouge\">\\\\n</code>).</p>\n\n<p>The only tweak we need is there should be a little bit indentation <em>after</em> the comma (group <code class=\"language-plaintext highlighter-rouge\">\\2</code> in the code below). The remaining indentation should be placed <em>before</em> the comma (group <code class=\"language-plaintext highlighter-rouge\">\\1</code>). For now, I assumed the indent to be two spaces. The <code class=\"language-plaintext highlighter-rouge\">((?:  )*)</code> construct is to see the two spaces as one ‚Äúthing‚Äù, so it could be matched multiple times. The <code class=\"language-plaintext highlighter-rouge\">?:</code> makes sure it is not remembered as a match. I do want to match <em>multiples</em> of two spaces here, hence the double parentheses.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>import re\ndef my_json_pretty_print(json):\n    return re.sub(r', *\\n((?:  )*)(  )', r'\\n\\1,\\2', json)\n</code></pre></div></div>\n\n<p><em>As a side-note</em>: since this is a learning exercise, I tried to make the regular expression more readable by using <a href=\"https://docs.python.org/3.8/library/re.html#re.X\">verbose regular expressions</a>. The idea about it whitespace (not used in special ways) is ignored, so you can use multi-line strings. You also can add comments to parts of the regular expression. However, I intend to match whitespace, but I couldn‚Äôt get it working. And because I also didn‚Äôt think the regular expression was more readable this way, I abandoned it.</p>\n\n<p>If we combine the two code-snippets from above, we get the following output printed:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"type\": \"pedant\"\n,  \"enabled\": true\n,  \"tags\": [\n    \"nag\"\n  ,  \"prick\"\n  ,  \"pin\"\n  ]\n,  \"data\": {\n    \"test\": 123\n  ,  \"cooperate\": null\n  }\n}\n</code></pre></div></div>\n\n<p>Not bad. Not bad at all! When we compare this to the desired layout from above, we can note the following:</p>\n\n<ul>\n  <li>There are two spaces between the comma and the object-properties, instead of one. I think this is not wrong, but one space would be nicer.</li>\n  <li>The opening object- and list-characters (<code class=\"language-plaintext highlighter-rouge\">{</code> and <code class=\"language-plaintext highlighter-rouge\">[</code>) are followed by a newline. This needs to be addressed.</li>\n  <li>The closing characters (<code class=\"language-plaintext highlighter-rouge\">}</code> and <code class=\"language-plaintext highlighter-rouge\">]</code>) seem to be at the right place, so we are fine there.</li>\n</ul>\n\n<p>First thing I want to fix is to support all sorts of indentations, and not only hard coded two spaces. I figured it is best to define a new function, which will call <code class=\"language-plaintext highlighter-rouge\">json.dumps</code>, so there is only need to pass <code class=\"language-plaintext highlighter-rouge\">indent</code> once. Addressing the issue with the extra space in the indentation: this is caused by the comma that is also functioning as an indentation character. Basically I need to delete the first character of the last indent, marked visually by the <code class=\"language-plaintext highlighter-rouge\">X</code>: <code><span class=\"indent-color\">&nbsp;&nbsp;</span><span class=\"indent-color\">&nbsp;&nbsp;</span><span class=\"indent-color\">x&nbsp;</span></code>.</p>\n\n<p>I played a bit with parameterizing the indentation into the regular expression. String concatenation looked terrible. Formatting with <code class=\"language-plaintext highlighter-rouge\">{}</code> and <code class=\"language-plaintext highlighter-rouge\">.format()</code> wasn‚Äôt a good match either, because curly braces are also special characters in regular expressions. <code class=\"language-plaintext highlighter-rouge\">printf</code>-style formatting (<code class=\"language-plaintext highlighter-rouge\">%s</code>) is a good alternative, while the regular expression stays readable.</p>\n\n<p>While playing with it, I discovered that the handling of the <code class=\"language-plaintext highlighter-rouge\">[</code>- and <code class=\"language-plaintext highlighter-rouge\">{</code>-characters are the same the <code class=\"language-plaintext highlighter-rouge\">,</code>-character, so I generalized the regex by changing <code class=\"language-plaintext highlighter-rouge\">,</code> to a capturing group that matches all three characters, and add a back-reference to the replacement. The code now looks like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def json_stringify(obj, indent=2):\n    if not isinstance(indent, str): indent = ' ' * indent\n    result = json.dumps(obj, indent=indent)\n    rx_indent = r'([,{[]) *\\n((?:%s)*)%s(%s)' % (indent, indent[0], indent[1:])\n    result = re.sub(rx_indent, r'\\n\\2\\1\\3', result)\n    # Special case: remove inserted newline with top-level array or object\n    return result[1:] if result[0]=='\\n' else result\n</code></pre></div></div>\n\n<p>So, if we run the code now, we get this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{ \"type\": \"pedant\"\n, \"enabled\": true\n, \"tags\": \n  [ \"nag\"\n  , \"prick\"\n  , \"pin\"\n  ]\n, \"data\": \n  { \"test\": 123\n  , \"cooperate\": null\n  }\n}\n</code></pre></div></div>\n\n<p>This is exactly how we want it. As always, there are some things to be desired:</p>\n\n<ul>\n  <li>Indentations with TAB-characters are not handled well. The code should only remove the first character of the last indent when it‚Äôs not a TAB-character.</li>\n  <li>Using regex special characters as indentation (like <code class=\"language-plaintext highlighter-rouge\">*</code>) make the program fail: the indent-string should be converted to a valid regular expression string first.</li>\n  <li>The code fails when <code class=\"language-plaintext highlighter-rouge\">indent=0</code> with an <code class=\"language-plaintext highlighter-rouge\">IndexError: string index out of range</code> on the code <code class=\"language-plaintext highlighter-rouge\">indent[0]</code>. This is easy fixable by using slices, like <code class=\"language-plaintext highlighter-rouge\">indent[:1]</code></li>\n</ul>\n\n<p>So that brings us to the following code:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def json_stringify(obj, indent=2):\n    if not isinstance(indent, str):\n        indent = ' ' * indent\n    result = json.dumps(obj, indent=indent)\n    r_indent=re.escape(indent)\n    if indent[:1]=='\\t':\n        r_indent0  = ''\n        r_indent1N = re.escape(indent)\n    else:\n        r_indent0 = re.escape(indent[:1])\n        r_indent1N = re.escape(indent[1:])\n    rx_indent = r'([,{[]) *\\n((?:%s)*)%s(%s)' % (r_indent, r_indent0, r_indent1N)\n    result = re.sub(rx_indent, r'\\n\\2\\1\\3', result)\n    return result[1:] if result[:1]=='\\n' else result\n</code></pre></div></div>\n\n<p>So, that‚Äôs it. I made this code into a <a href=\"https://gist.github.com/doekman/e6e942d03f9dee3e98c080b7a47cd04b\">shell script</a>, so it can be run from the command line (don‚Äôt forget to <code class=\"language-plaintext highlighter-rouge\">chmod +x</code> it before you start it). So how does it perform?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ls -lh\n-rw-r--r--   1 doekman  staff   4,9M 22 sep 17:08 big_trello_export.json\n-rwxr-xr-x   1 doekman  staff   705B 22 sep 17:10 json-pp.py\n$ time ./json-pp.py &lt; big_trello_export.json &gt; big_test.json\nreal\t0m0.849s\nuser\t0m0.734s\nsys\t0m0.069s\n$ ls -lh\n-rw-r--r--  1 doekman  staff   7,3M 22 sep 17:11 big_test.json\n-rw-r--r--  1 doekman  staff   4,9M 22 sep 17:08 big_trello_export.json\n-rwxr-xr-x  1 doekman  staff   705B 22 sep 17:10 json-pp.py\n$ \n</code></pre></div></div>\n\n<p>Not bad. Five megabytes within the second on my 2017 iMac. I expected worse. But to state the obvious: don‚Äôt use this in production.</p>\n\n<p>As I mentioned at the start: I couldn‚Äôt have ended this quest without back-porting this code to the <a href=\"https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\">origins of JSON</a>. The advantage of string substitution: it can easily be converted to JavaScript.</p>\n\n<p>Converting the code to JavaScript was pretty straight-forward. Things worth mentioning:</p>\n\n<ul>\n  <li>JavaScript now comes with build-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON-methods</a> (grandpa speaking)</li>\n  <li>I couldn‚Äôt find a native <a href=\"https://docs.python.org/3.8/library/re.html#re.escape\">re_escape</a> for JavaScript, so I used <a href=\"https://github.com/doekman/base2/blob/1e2eb7fb10565db7e71d2b25780783627e0773dd/src/base2/js/String2.js\">Dean Edward‚Äôs rescape</a> from the (now ancient) <a href=\"https://code.google.com/archive/p/base2/\">base2-library</a>. Substitutions in JavaScript are <code class=\"language-plaintext highlighter-rouge\">$1</code> instead of <code class=\"language-plaintext highlighter-rouge\">\\1</code> in Python</li>\n  <li>To generate 4 spaces, in Python you would write <code class=\"language-plaintext highlighter-rouge\">4*' '</code>. I couldn‚Äôt find the JavaScript equivalent first, so I used <code class=\"language-plaintext highlighter-rouge\">new Array(1+4).join(' ')</code> but then I found out you can use <code class=\"language-plaintext highlighter-rouge\">' '.repeat(4)</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Browser_compatibility\">modern browsers</a></li>\n  <li><a href=\"http://es6-features.org/#StringInterpolation\">Template Literals</a> are still <a href=\"https://caniuse.com/mdn-javascript_grammar_template_literals_template_literal_revision\">a bit to new</a> to use everywhere, so I implemented the regular expression with string concatenation</li>\n  <li>Python slices <code class=\"language-plaintext highlighter-rouge\">[1:2]</code> are calls to <code class=\"language-plaintext highlighter-rouge\">.substring(1,2)</code> in JavaScript. Why can‚Äôt I remember this?</li>\n</ul>\n\n<p>You can try the <a href=\"https://zanstra.com/my/Json-pp.html\">JavaScript version here</a>. Thanks for reading!</p>\n\n",
			"summary": "TLDR; You can pretty print JSON in a different manner. Try it here.",
			"date_published": "2020-10-05T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2020/04/03/query-trello-json-with-postgres",
			"url": "https://blog.zanstra.com/2020/04/03/query-trello-json-with-postgres.html",
			"title": "Query Trello data with Postgres (JSON)",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Recently, I was working on a project to automatically create Trello-cards via their API. To do that, I needed some <em>id</em>-values from the Trello-board which are not shown in the user-interface. But where does one get these values?</p>\n\n<p>Glad you asked. Every Trello-board can be <a href=\"https://help.trello.com/article/747-exporting-data-from-trello-1\">exported to JSON</a>, and the values I was looking for are available in this export. However, <em>JSON</em> gives you the data in one big piece of text. Wouldn‚Äôt it be handier to have it available as <strong>tabular data</strong> in a database?</p>\n\n<p>So I created <a href=\"https://github.com/doekman/postgres-with-trello\">this git-repository</a> to do just that (you will need the <a href=\"https://www.postgresql.org\">Postgres</a>-database for this).</p>\n\n<p>The table in which the JSON is stored, is modelled after an <a href=\"https://rob.conery.io/2015/02/28/document-storage-gymnastics-in-postgres/\" title=\"Don't forget to click on the POSTGRES-tag on his site, listing a lot of interesting posts...\">idea of Rob Conery</a> which basically is: store the JSON in a column, along with another column that uniquely identifies the document. This unique value is also available within the JSON itself.</p>\n\n<p>For example:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>id, json\n12, '{\"id\":12, \"other\":\"data\"}\n13, '{\"id\":13, \"other\":\"info\"}\n</code></pre></div></div>\n\n<p>The actual table definition is different, but you get the idea. And don‚Äôt worry about storing the id-value twice: this small abstraction will make your life a bit easier.</p>\n\n<p>On top of this document table, I created views for most used objects, like <em>cards</em> and <em>lists</em>. The pretty simple idea of ‚Äúviews on top of json‚Äù is pretty powerful. You get a lot of <strong>bang for your buck</strong>!</p>\n\n<p>If you‚Äôre on a Mac, <a href=\"https://postgresapp.com\">Postgres.app</a> is the easiest way to setup a database, but <a href=\"https://brew.sh\">Homebrew</a> works fine too. As client, I use <a href=\"https://eggerapps.at/postico/\">Postico</a> which I really like a lot.</p>\n\n<p>So if you have a postgres database setup, and have cloned the <a href=\"https://github.com/doekman/postgres-with-trello\">git project</a>, it‚Äôs easy to create the database object via the terminal by typing:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>make trello\n</code></pre></div></div>\n\n<p>This will create the <code class=\"language-plaintext highlighter-rouge\">trello</code> schema and within the schema the <code class=\"language-plaintext highlighter-rouge\">document</code> table in which the json will be loaded and a bunch of views. I‚Äôve included a Trello export file, so you can load it by running the following command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tool/loaddoc.sh data/simple_board_v1.json\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">loaddoc</code> inserts the JSON-document in the database, unless it already exists. In that case it will update the row. To aid this <em>upsert</em> behaviour, I‚Äôve added a <em>trigger</em> to the database schema that updates the id-column. Ideally, this would be handled by the tool itself. However: this is a minimum-imlementation. I couldn‚Äôt find anything to load json into the database from the command line.</p>\n\n<p>A note about the id-column. Trello uses hexadecimal identifiers of 24 positions. That‚Äôs easy for computers, but a little harder for humans. So to ease filtering the views, I‚Äôve added an integer-column with auto-numbering.</p>\n\n<p>Below the screenshot showing the result in Postico with <a href=\"https://trello.com/b/ZWvFVK9Z/postgres-with-trello\">this Trello-board</a> loaded; the same one as we just loaded. On the left you see the table and views. Above I‚Äôve applied a filter, so I only see the lists from the first JSON document. All columns are type-cast. When you hover the image, the right pane is shown which also show type information.</p>\n\n<html>\n\t<figure tabindex=\"0\">\n\t\t<img src=\"/images/2020-03/Query-trello-json-with-postgres_A.png\" alt=\"Screen-shot of the Postico application\" class=\"non_hoover\" />\n\t\t<img src=\"/images/2020-03/Query-trello-json-with-postgres_B.png\" alt=\"Screen-shot of the Postico application, with right pane\" class=\"hoover\" />\n\t\t<figcaption>\n\t\t\tThe trello_list-view, with a filter applied <span class=\"non_print comment\">(mouseover to display right pane)</span>\n\t\t</figcaption>\n\t</figure>\n</html>\n\n<p>Since I talked a lot about tooling: when you run <code class=\"language-plaintext highlighter-rouge\">cat .ok</code> on the command line, you will find some often used commands on your screen. It‚Äôs called an <em>ok-profile</em>. The <a href=\"https://github.com/secretGeek/ok-bash\">ok-bash</a>-tool will make it easier to work with this. It also makes you smarter and more efficient.</p>\n\n<p>So if you develop for Trello, you should really <a href=\"https://github.com/doekman/postgres-with-trello\">give this a try</a>. And if you are working with JSON documents from other origins, I‚Äôm very much interested in your ideas.</p>\n\n<hr />\n\n<p>Originally published <a href=\"https://gist.github.com/doekman/e9b1530f0150822b464c4f7b0262a4f3\">at this gist</a> on GitHub.</p>\n",
			"summary": "Recently, I was working on a project to automatically create Trello-cards via their API. To do that, I needed some id-values from the Trello-board which are not shown in the user-interface. But where does one get these values?",
			"date_published": "2020-04-03T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2020/02/17/ok-bash-and-python",
			"url": "https://blog.zanstra.com/2020/02/17/ok-bash-and-python.html",
			"title": "ok-bash and Python on macOS",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Development on <a href=\"https://www.python.org/doc/sunset-python-2/\">Python 2 has been stopped</a>, and the default availability of Python on macOS <a href=\"https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes#3318257\">will be deprecated</a> anywhere in the nearby future. Last week, <a href=\"https://scriptingosx.com/2020/02/wrangling-pythons/\">Scripting OS X</a> wrote about how to deal with this from an admin-perspective.</p>\n\n<p>Here I would like to explain how we deal with this from the perspective of a small but very handy tool called <a href=\"https://github.com/secretGeek/ok-bash\">ok-bash</a>. This nifty tool helps you free brainspace by creating <code class=\"language-plaintext highlighter-rouge\">.ok</code>-folder profiles for bash. You should check it out: it really makes you smarter and more efficient.</p>\n\n<p>Since the default availability of Python on macOS is threatened, this article is written from a macOS point of view. But the tool itself works on all systems that run <em>bash</em>.</p>\n\n<p>The tool is exposed via a bash-function, with a Python-backend helping with more complex tasks like syntax highlighting and other formatting. We need a bash-frontend, so the tool can work in the current shell environment.</p>\n\n<p>We want to keep installation of <em>ok-bash</em> simple, so users can just clone the git-repository and initialize it via the shell startup file.</p>\n\n<p>Since there are so many ways to manage Python, we decided to resolve the used python-binary that‚Äôs within the current <code class=\"language-plaintext highlighter-rouge\">PATH</code>. This is termined via the command <code class=\"language-plaintext highlighter-rouge\">which python3 || which python</code>, so Python 3 is used when available (the Python-backend works both in versions 2 and 3). Also, when only Python 2 is available (or if Python 3 is symlinked to <code class=\"language-plaintext highlighter-rouge\">python</code>), ok-bash still works.</p>\n\n<p>It‚Äôs also possible to manually override the path to Python, by setting an environment variable.</p>\n\n<p>In the future, ensuring Python‚Äôs availability can be done via a <a href=\"https://docs.brew.sh/Homebrew-and-Python\">homebrew recipe</a>. An extra advantage of homebrew is it supports the use of virtual environments.</p>\n\n",
			"summary": "Development on Python 2 has been stopped, and the default availability of Python on macOS will be deprecated anywhere in the nearby future. Last week, Scripting OS X wrote about how to deal with this from an admin-perspective.",
			"date_published": "2020-02-17T00:00:00+01:00",
			"tags": []
		},
		 {
			"id": "/2019/10/02/To-the-point",
			"url": "https://blog.zanstra.com/2019/10/02/To-the-point.html",
			"title": "To the Point",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Already two internet aeons ago, <em>secretGeek</em> came up with some <a href=\"http://secretgeek.net/up_up_up\">handy bash-aliases</a> to ease navigating the folder hierarchy:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>alias ..='cd ..'\nalias ...='cd ../..'\n#and so on\n</code></pre></div></div>\n\n<p>Two dots plus an enter navigate you one directory down¬π, three dots do that twice, and so on. However, a single dot doesn‚Äôt go anywhere and gives you rudely some error message. No help there:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ .\n-bash: .: filename argument required\n.: usage: . filename [arguments]\n</code></pre></div></div>\n\n<p>Turns out the <code class=\"language-plaintext highlighter-rouge\">.</code> is a <a href=\"https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins\">shell buildin command</a> that requires at least a filename as an argument. How rude.</p>\n\n<p>Wouldn‚Äôt it be handy and appropriate to print the current path when no argument is given? In that case, you could try adding the following to your <code class=\"language-plaintext highlighter-rouge\">.profile</code> or equivalent startup file:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function . { if [[ $# -eq 0 ]]; then pwd; else source \"$@\"; fi }\n</code></pre></div></div>\n\n<p>Now a single dot will be more polite and will show the current path. Used with arguments, it works like before. So you still can use it to source scripts, like <a href=\"https://github.com/secretGeek/ok-bash/\">ok-bash</a>.</p>\n\n<p style=\"margin-top:4em\">\n\t<small>\n\t\t¬π) I've been told a hierarchy of folders/directories is a tree structure. When navigating into a folder, like <code>cd some_folder</code>, to my earnest knowledge one moves up. Branches mostly grow to the light where the sun is, which is up in the sky. So if you go back from said folder with <code>cd ..</code> one would move down. So secretGeek's aliases better be called <code>down_down_down</code> but maybe that has a less engaging ring to it.  Also: the base of the hierarchy ‚Äîone could go there with <code>cd /</code>‚Äî is called the root, which is a kind of odd, because the root is as branched as the part of the tree that grows in the air. And at the file system, it's only one place! Anyways, the proposed function neither goes up nor down, so at least we have no confusion there.\n\t</small>\n</p>\n",
			"summary": "Already two internet aeons ago, secretGeek came up with some handy bash-aliases to ease navigating the folder hierarchy:",
			"date_published": "2019-10-02T00:00:00+02:00",
			"tags": ["cli"]
		},
		 {
			"id": "/2019/08/26/NetNewsWire",
			"url": "https://blog.zanstra.com/2019/08/26/NetNewsWire.html",
			"title": "NetNewsWire 5.0 released",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>From the <a href=\"https://github.com/brentsimmons/NetNewsWire/blob/master/Technotes/CodingGuidelines.md#version-control\">Coding Guidelines</a> of NetNewsWire:</p>\n\n<blockquote>\n  <p><strong>Version Control</strong><br />\nEvery commit message should begin with a present-tense verb</p>\n</blockquote>\n\n<h2 id=\"2017\">2017</h2>\n<p>Initial Add Add Add Add Remove Add Add Add Add Add Add Add Add Fix Make Add Unbreak Add Add Add Add Add Add Add Add Add Add Add Delete Add Remove Drop Add Add Add Add Add Add Comment Allow Put Make Update Make Show Wire Avoid Replace Add Add Ignore Add Write Update Remove Merge Generate Merge I Merge.</p>\n\n<p>Provide If Add Merge Fix Merge Fix Merge Merge Update Merge Use Use Start Create Start Extract Start Make Make Get Start Add Turn Add Add Move Fix Add Add.</p>\n\n<p>Commit Continue Move Add Work Continue Continue Delete Convert Convert Convert Convert Convert Remove Converrt Add Replace Set Begin Move Remove Set Continue Add Back Make Start Make Make I Rename Give Start Continue Create Add Make Do.</p>\n\n<p>Get Make Get Attach Progress Make More Continue Make LookupTable. Using Yet More Merge Remove Start Checking Added Start Progress Make Finish Make Turn Make Decide Progress Make Fix Make Create Make Delete Progress. Implement Start.</p>\n\n<p>Implement Create Make Make Make Make Continue Continue Make Continue Deal Get Make Use Call Add Delete Fix Make Marked Use Make Make Update Fix Make Rename Remove Add Prune Switch Save Update Move Merge Fix Update Merge Remove Update Move Update Fix Create Slightly Cache Use Delete Implement Update Update Make Update Move Create Delete Fix Get Move Delete Replace Continue Fix Continue Continue Continue Continue Continue Make Get Make Continue Continue Start Use Create Switch Simplify Update Start Remove Start Rename Do Move Make Fix Start Start Make Init Make Fix Make Init Fix Perform Edit Add.</p>\n\n<p>Make Fix Fix Fix Fix Fix Fix Create Move Remove Make Create Make Rewrite Use Fix Fix Remove Require Add Use Use Send Move Update Keep Update Create Make Call Save Fix Avoid Avoid Set Set Simplify Save Comment-out Add Remove Update Update Include Fix Update Refactor Avoid Handle Handle Rename Update Use Show Make Add Implement Show Update Make Fix Create Update Update Define Handle Make Update Differentiate Add Use Removed Update Change Make Make Post Rejigger Send Rewrite Use Update Move Make Fix Update Maintain Update Update Start Create Switch Begin Clear Rename Update Move Fix Edit Put.</p>\n\n<p>Flesh Craete Fix Create Start Do Start Fix Move Move Read Show Use Use Make Make Make Upgrade Upgrade Upgrade Upgrade Fix Make Switch Make Add Display When Mark Use Add Add Add Add Create Write Allow Write Check Add Remove Calculate Draw Close Start Show Draw Create Add Show Change Add Add Merge Rename Add Post Make Make Run Move Update Add Show Add Remove Add Skip Add Bump Add Add Change Add Change Bump Use Lighten Switch Set Decode Add Expand Set Bump Create Fix Use Create Add Add Add Add Fix Create Treat Update Make Use Add Delete Create Move Implement Remove Bump Switch Disallow Save Start Save Save Create Create Make Create Make Make Bump Make Update Set Darken Create Create Switch Create Make Make Replace Fix Make Create Make Use Fix Implement Use Update Show Return Add Bump Update Check Add Fix Fix Put Note Edit Avoid Log Normalize Print Log Simplify Log Add Start Adjust Pull Add Use Rebuild Add Fix Keep Add Make Parse Get Add Start Add Add Prefer Bump Add Add Add Fix Do Don‚Äôt Add Hide Add.</p>\n\n<p>Avoid Update Update Bump Fix Save Use Make Start Add Fix Get Add Add Use Bind When Create Delete Fix Do Increase Fetch Set Show Create Refresh Make Use Update Merge Update Add Start Add Fix Continue Make Define Make Create Make Create Create Parse Fix Base Cache Update Clean Fix Remove Remove Get Increase Add Create Create Remove Remove Remove Add Add Add Make Use Add Draw Skip Add Delete Reuse Parse Remove Bump Update Merge Add Save Refresh Parse Make Add Prefer Test Add Support Add Parse Add Add Make Add Add Fix Add Add Add Add Make Implement Add Style Display Normalized Continue Progress Make Edit Implement Position Bump Update Add Add Update Fix Add Add Link Add Add Add Fix Add Add Fix Add Continue Add Fix Update Use Merge Set Add Merge Update Update Move Implement Merge Clean Move Validate Add Use Use Remove Merge Simplify Return Validate Popup Add Remove Create Improve Set Start Don‚Äôt Set Use Use Bump Remove Update Implement Go Add Use Make Bump Update Remove Remove Create Merge Make Continue Continue Show Update Add Update Fix Show Use Put Add Fix Use Update Add Add Show Make Fix Comment Bump Update Freeze Fix Make Show.</p>\n\n<h2 id=\"2018\">2018</h2>\n<p>Move Move Add Show Fix Check Use Update Make Make Turn Create Remove Draw Add move Merge Merge, Bump Increase Make Start Check Remove Merge Make Decrease Make Update Continue basic Merge revert Merge Make Add Use Add Switch Make User Use Fix Increase Add Bump Change Update Update Add Add Create Add Make Use Use Bump Update Make Unbreak Create Scripting Merge Add revert Merge Add Remove Layout Create Create Make Continue Keep Adjust Remove Reopen Open Restore Hide Display Continue Increase Continue Set Share Create Send Extend Make Add Revise Refer Move Add Handle Use Update Merge Scripting revert Add Merge Remove Download Switch Remove Remove Back Use Remove Add Add Set Make Add Add Add Add Validate Set Merge Consider Register Merge Re-sort Create Build Add Add Create Change It Accept Remove Sender Merge Merge Merge.</p>\n\n<p>Merge convert Merge Merge Start Merge Create Layout Change Add Wire Try Disable Make Delete Remake Make Remove Continue Get Add Add Move Make Remove Bump Update Reorder Remove Create Merge Merge Remove Show Make Show Change Update Restore implement Merge Merge Start Add Merge Add Pass Rearrange Add Use Add Create Add Make Add Add Remove Fetch support Merge Merge Fetch Rename Bump Update Remove Skip Make Remember Fix Make Skip Disallow Punt Make Create Implement Support Add Start Make Support Make Remove Update Bump Update When Skip Make Add Do Merge Hide When Make Update Make Create Delete Remove Add Add Use Use Use Remove Remove Use Create Use Create Use Don‚Äôt Use Add Remove Create Move Remove Move Move Fix Remove Move Darken Do Start Show Skip Add Mark Release Make Remove Rewrite Define Tweak Bump Update Give Tweak Draw Show Make Update Merge Switch Remove Create Add Turn Reenable Make Add Use Make Don‚Äôt Don‚Äôt Remove Replace Make support Remove Start Continue Use Fix Turn Reduce Lower Lighten Tweak Add Skip Make Turn Fix Match Adjust Use Make Turn Revert Hide Fix Make Make Deal Rebuild Bump Update Force Draw Reduce Save Bump Update Start Clean.</p>\n\n<p>Support Merge revert Reset Merge Merge.</p>\n\n<p>Add Merge add Merge better.</p>\n\n<p>Merge Add Merge.</p>\n\n<p>Add Remove Break Break Break Break Break First Merge use Break Break Rename Rename Add Add Add Add Build Update.</p>\n\n<p>Add Get Get Make Add Use Nuke Fix Remove Remove Remove Use Update Merge Really Use Use Make Submodule Remove Submodule Start RSDatabase Remove Rename Move Delete Remove Include.</p>\n\n<p>Update Add Unbreak Merge Oops Merge Add I Change Merge Fix Changes Merge Simplify Update Fix Use Unignore Use Use Use Use Update Use Update Use Use Use Use Use Use Use Use Use Update Update Update Add Update Update Use Update Merge Finish Use <strong>üéâ<a href=\"https://inessential.com/2018/08/31/netnewswire_comes_home\" title=\"Celebrate\">Start</a> <a href=\"https://inessential.com/2018/08/31/netnewswire_comes_home\" title=\"Celebrate\">Continue</a>üè°</strong> Update Update Revise Merge.</p>\n\n<p>Removed Rename Update Change Use Use Merge Switch Merge Merge Hide Allow Normalize Normalize Fix Make Update Stop Merge Don‚Äôt Rename Add Update Add Update Start Keep Use Merge Merge Manually Add Bump Bump Hide Add Add Fixed Fix Merge Merge Don‚Äôt Merge Removed Fixed Merge Merge Update Update Change Changed fixed Merge Added Merge Remove Update Bump Update Enabled Merge Enabled Merge Bump Fix Print Fix Give Update Implemented Start Update Rolledback Enabled Changed Enabled Stop Update Update Stop Give Store Stop Merge Don‚Äôt Write Merge Merge Changed Added Merge Merge Save Merge Store Store Make Store Store Store Store Skip Write Added On Remove Stop Delete Remove Made Update Skip Merge Modified Updated Disallow Include Register Create Made Made Remove Start Make Refactor Merge Normalize Register Validate Add Accept Make Get Validate Make Added Added Sorted Redo Start Improve Merge Merge Merge 5.0d7. Update Temporarily Fix Include Merge.</p>\n\n<p>Update Continue Complete Fix Similar Merge Merge.</p>\n\n<p>Remove Update Re-enable Make Allow Update Make Update Increment Install Clean Update Update Update.</p>\n\n<p>Clean Update Merge Add Add Make Override Use Enable Add Add Update Update Get Do Disable Update Move Add Remove Add Remove Start Continue Make Remove Add Remove Add Use Rename Remove Make Move Fix Remove Remove Remove Make Add Add Add Add Make Make Add Remove.</p>\n\n<h2 id=\"2019\">2019</h2>\n<p>changed Merge added Merge Start Merge Send Add Fix Update Run Don‚Äôt Start Add Add Add Update Update Add Fix Update Bind Add Switch Keep Update Update Fix Set Bump Close Add Bind Refresh Check Add Fix Switch Update Remove Enable Update Make Bump Tighten Reduce Further Update Bump.</p>\n\n<p>Moving Remove Updates Update Re-sort Restore Make Set Start Update Refresh Bump Drop Update Use Make Add Implement Add Implement Bump added Merge Don‚Äôt Don‚Äôt Update Make Allow Queue Do Remove Remove Remove Skip Fix Fix Discard Bump Update Skip Stop Update Remove Remove Remove Remove Remove Fix Merge Move Merge Remove Get Delete Delete Simplify Simplify Simplify Rationalize Import Start Make Update Quiet Merge Create Update Remove Move Make Remove Make Place Move Create Add Start Start Differentiate Merge Change Fix Merge Work Merge Make Continue Start Continue Remove Make Make Continue Rewire Fix Merge. Update Make Remove Remove Make Update Make Update Update Implement Make Add Index Update Revise Create Show Add Update Remove Revert Bump.</p>\n\n<p>Implemented added Use Remove Get Remove Remove Create Made Recalculate Merge Merge Remove Comment-out Rolled Merge Updated Merge Switch Merge Made Merge updated Merge made Merge add Merge Change Document Delete Create Update Continue Add Import Pull Change Remove Start Continue Update Make Make Skip Remove Remove Perform Do Give Pay Start Update Continue Make Make Move Finish Continue Continue Update Merge Store Update Convert Convert Post Convert Convert.</p>\n\n<p>Remove Set Drop Merge Remove Removed Create Merge Updated Remove Remove Remove Remove Merge Made updated Changed Updated Use Remove Remove Remove Remove Remove Remove Update Move Fixed Merge Remove Merge Delete Fix Move Move Remove Remove Major Move set Added updated Remove Work Start Update Save Update Take Made updated Added added Added adding Merge cleared Attempted Design Removed Merge Added Fixed Combined Combined Fixed Implemented Implemented Updated Group Merge Update Update Update Update Merge Updated Established Adjusted Fixed Fixed Changed Cleaned Fixed Added Added Made Added Reduced Fixed Implemented Refactored Made Added Changed Renamed Added Made Implemented Add Remove Add Update Start Create Switch Change Fix Implement Make Fix updated Update Fix Remove Tweak Fixed Change Revise Merge Removed Restored Fix Change Prevent Create Change Update implement Move Change Refactor Encapsulate Implement Add Finish Hide Move Prevent Fix Removed Hide Change Add Implement Fix Make Make Skip Remove Change Add Rename Make Change Add Refactor Enable Comment Implement Change updated Fix Add Implement Updated Add Add Prevent Add Rework Update Change Remove Add Rollback Enable Add Added Made Remove Change Add Enable Tweak Add Add Change Tweak Hack Provide Delete Rename implement Fix Fix Force Fix Made Deselect Deleted Align Make Respond Fix Align Change Slightly Increase Changed Use Add Merge Update Add Merge Add Add Merge Add Change Merge Change Create Change Fix Merge Refer Implement Make Made Merge Set Add Fix Add Fix Reuse Merge Write Add Make Merge.</p>\n\n<p>Rename Add Add Make Rename Rename Add Load Enable Delete Refine Make Make Prevent Implement Make Make Add Implement Implement Tweak Expand Prevent Show Update Updated validate Make Update Made change Add Add refactor Upgraded Pass Modify Rename Add Add Update Fix update make Add Added Fix Add Change Add Save added Add Keep Add Add Add added Update Add Fix Add Update Add Change Use Add Capture Refactor Add Restrict Move add store make Make Place Make Added Change Delete Set Change Add Put Stub Make Speed Use Set Update Merge Add Save Add Fix Delegate Make Save Change Scale Add Add Fix Upgraded Fix Fix Removed Fix Restore Update Add Start Update Add Add Add Rename Add Align Switch Prevent Retrieve Add Fix Scale Merge Update Show Fixed Disable Merge Move Make Remove Remove Add Disable Merge Remove Rename Dismiss Don‚Äôt Removed Disable Don‚Äôt Dismiss Rename Updated Improved Further Made Add Made Updated Set Add Moved Always Made Merge Allow Update Decrement Simplify Increase Merge Add Add Merge Make Make Updated Implement Make Make Remember Fix Update Remember Add Remember Make Update Update Send Fix Enhance Use Change Merge Remove Correct Use Cleaned Left Improved Removed UI Show Centered Merge Made Fixed Use Update Add Update Remove Update Merge Reformat Remove Add Set Merge Update Merge Correct Update Add Fixed Change Add Wrap Update Update Tweak Revise Add Fix Fix Add Tweak Change Make Update Change Merge Allow Enable Updated Updated Merge Refactor Correct Remove Google Use Point Enable Prevent Remove Handle Enforce Update Authentication Update Merge Rework Enable Corrected Remove Correct Refactor Rename Rename Add Ensure Modify Enable Handle Decoding Refactor Update Validate Fix Clear Remove Make Merge Merge Update Update Remove Provide Made Bump Update Fix.</p>\n\n<p>Cleanup Cleanup Add Make Pop Add Prevent Fix Fix Fix Ensure Fix Remove Fix Move Revert Fixed Merge Resolved Fix Merge Fix escape Fix Merge NetNewsWire upgraded Fix Changed Add Update Make Updated Updated Change Request Show add Merge Update Update Unread Mark Convert Make Add Update Add Fix Dismiss Merge Added Merge Updated Revert Add Added Updated Updated Marking moved Add Use fixed Refactor adding trying fix Merge Add Merge adjusted Made Made Refactor Add Correct Add Update center add Add Merge Revert Add Added Merge Fixes Merge Need Updated Add Merge Merge submodules Merge Move Subscribing Rename Port Add Merge Opens Update Update Update Merge Move Add Add Disbale removed Merge Merge FIrst Change use Fixed Wiring Code Begin Update Update Only Update Merge Update Remove Skip Use Merge Merge Change Move Update Implement Cleanup Merge Merge Adds Merge Renamed Merge Updated some Merge Merge Merge Merge Renamed restores restores Restrict Corrects Merge Merge Changed Switches Adds Switches Rebrand Merge Update Ensure Reduce Update Make Support Low Set SF Merge SF Rolls Deletes Merge Implement Merge Retrieve Temporarily Move Force Navigate Correct Fix Fix Removed Move Temporally Add Change Rename Fix.</p>\n\n<p>Move Run Merge Update Add Encapsulate Move Move Move Remove Change Merge Write Update Update Make Update Add Note Remove Update Merge Update Make Merge Use Update Update Update Mark Make Merge Remove Make Delete Make Make Make Make Make Make Merge Update Use Update Merge Create Merge Merge Add Merge Add fiddle Merge Merge Use Merge Create Merge Updated Use Remove Merge Merge Create Merge Create Create Make Merge Create merge Merge Add Prevent Added Add Fix Hook Change Show Fix Initial Fix Merge Make Merge Help Remove Merge Remove Automatically Rename Change Merge Show Merge In Restore Merge Remove Merge Merge Make Merge Remove Trying Get Merge make Merge rename CLean Skip Merge Integrate Check Merge Merge Merge revert Revert Try Exempt Merge Helpbook: Merge Add Merge Prevent Merge fix Fix fix Merge Merge.</p>\n\n<p>Merge Refactor Make Add Remove Implemented Correctly Adjust Correct The Merge Merge Replace Merge Fix Fix Fix Remove Merge Made Keep Fix Wire Merge Fix Merge Enable Add Merge Fix Deleted Made Remove Fix Fix Merge Reformat Merge Refactor Fix Change Reenable Correct Removed Fix Fix Fix Helpbook: Merge Remove Merge Help Merge Change Merge Merge fix undo Bump Merge Add, Merge Merge Update Fix Merge Bump Merge Use Merge Break Merge Update Add Add Get Update Merge Bump Merge Update Bump Merge Now Merge Update Fix Rearrange Add Add Add Add Center Add Add Add Add Change Do Implement Add Merge Add Remove Move Add Merge Add Add Add Add Move Merge Commenting Fix Work Change fix Replace, Merge Start Port Change Optimize Remove Make Give Refetch Bump Merge Update Add Merge Hack Remove Add Fix Reload Center Center Center Bump Update Merge Bump Merge Add Leverage Merge add Change Add Update.</p>\n\n<p>Congratulations to Brent and others. <a href=\"https://ranchero.com/netnewswire/\">Enjoy NetNewsWire 5.0</a>‚Ä¶</p>\n\n",
			"summary": "From the Coding Guidelines of NetNewsWire:",
			"date_published": "2019-08-26T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2019/08/17/Office-for-OS-X-icons",
			"url": "https://blog.zanstra.com/2019/08/17/Office-for-OS-X-icons.html",
			"title": "Office for OS X icons",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p><strong>Updated 2021-05-19</strong>: <em>added Big Sur icons.</em><br />\n<strong>Updated 2023-06-21</strong>: <em>Added 2023 ‚ÄúShow your pride‚Äù-variation (<a href=\"https://blogs.microsoft.com/blog/2022/06/01/microsoft-celebrates-pride-around-the-world-even-in-the-metaverse-as-we-donate-to-lgbtqia-nonprofits-release-xbox-pride-controller-and-more/\">2022 update apparently</a>)</em></p>\n\n<p>OS X, now called macOS, was based on the <a href=\"https://en.wikipedia.org/wiki/NeXTSTEP\">NeXTSTEP</a> operating system. And one innovation of this operating system was large full-color icons.</p>\n\n<p>With the introduction of new icons this year with Office 365 (including the 2019 retail version), I felt the need to create this:</p>\n\n<html>\n\t<figure tabindex=\"0\">\n\t\t<img src=\"/images/office-for-os-x-icons-2023.png\" alt=\"Office for OS X icons (2022 Pride update)\" class=\"non_hoover\" />\n\t\t<img src=\"/images/office-for-os-x-icons.png\" alt=\"Office for OS X icons (original)\" class=\"hoover\" />\n\t\t<figcaption>\n\t\t\tOffice for OS X icons 2022 Pride update <span class=\"non_print comment\">(focus or hover to display original)</span>\n\t\t</figcaption>\n\t</figure>\n</html>\n\n<p>In 2001, Office v. X was released. It‚Äôs design was very distinct from Windows, and also very <a href=\"https://en.wikipedia.org/wiki/Aqua_(user_interface)\">aqua-y</a>. The maximum size was 256√ó256 pixels. The 2004 icons I found were oddly sized 128√ó128 pixels. The resolution of the 2008 and 2011 icons went up to 512√ó512 pixels. These were also the last OS X-specific icons for Office.</p>\n\n<p>Starting with the 2016 version, the icons design of the Windows version was also used with macOS. And because of higher resolutions of displays, the dpi-count of the icons went up from 72dpi to 144dpi, making the 2016 and 2019 icons sized 1024√ó1024 pixels.</p>\n\n<p>Haven‚Äôt had enough? At the excellent Version Museum they have <a href=\"https://www.versionmuseum.com/history-of/microsoft-word\">all Windows icons of Word</a> including screenshots. They also have a page on <a href=\"https://www.versionmuseum.com/history-of/microsoft-excel\">Excel</a> .</p>\n\n",
			"summary": "Updated 2021-05-19: added Big Sur icons.Updated 2023-06-21: Added 2023 ‚ÄúShow your pride‚Äù-variation (2022 update apparently)",
			"date_published": "2019-08-17T00:00:00+02:00",
			"date_modified": "2023-06-21T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2019/06/12/Rename-github-repo",
			"url": "https://blog.zanstra.com/2019/06/12/Rename-github-repo.html",
			"title": "On renaming a GitHub repository",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Did you know you can rename GitHub-repositories? There are some quirks though.</p>\n\n<p>Check it out: <a href=\"https://github.com/doekman/You-are-so-lame\">https://github.com/doekman/You-are-so-lame</a></p>\n",
			"summary": "Did you know you can rename GitHub-repositories? There are some quirks though.",
			"date_published": "2019-06-12T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2019/05/06/Introducing-osagitfilter",
			"url": "https://blog.zanstra.com/2019/05/06/Introducing-osagitfilter.html",
			"title": "A third way of putting AppleScript into git",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>There are currently two ways of putting AppleScript into git. First is just by adding the binary <code class=\"language-plaintext highlighter-rouge\">.scpt</code>-files. You don‚Äôt get much benefit from using git, but it works.</p>\n\n<p>The <em>second way</em> is to save your AppleScript source as text-files, and put these into git. You get advantages from git, but it is not as seamless as the first way.</p>\n\n<h1 id=\"introducing-osagitfilter\">Introducing osagitfilter</h1>\n<p>Now you can combine those two ways by using the <a href=\"https://github.com/doekman/osagitfilter/\">osagitfilter utility</a>. Technically, it‚Äôs a <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#filters_a\">git filter</a> that translates AppleScript‚Äôs binary format into the text-representation which then will be used by git‚Äôs internal workings.</p>\n\n<p>See the <a href=\"https://github.com/doekman/osagitfilter/blob/master/README.md\">repository‚Äôs readme</a> for installation instructions. After that, you can put compiled script files, AppleScript applications and script bundles in git as if they where regular text-files. When you then clone this repository, the files are re-assembled bit-perfect.</p>\n\n<p>Let me demonstrate this by an example. First create a git-repository:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git init osagitfilter-demo\ncd osagitfilter-demo\n</code></pre></div></div>\n\n<p>Now create the AppleScript-file <code class=\"language-plaintext highlighter-rouge\">my_script.scpt</code> in this folder with the following contents:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>display dialog \"What's your name\" default answer \"\"\nsay \"Hi there, \" &amp; text returned of result\n</code></pre></div></div>\n\n<p>Since we don‚Äôt want to add a binary file to git, we first need to associate the <code class=\"language-plaintext highlighter-rouge\">.scpt</code>-extension with the osagitfilter (you need to explicitly <em>opt-in</em> every repository). This can be done by adding a line to the <code class=\"language-plaintext highlighter-rouge\">.gitattributes</code>-file, connecting the <code class=\"language-plaintext highlighter-rouge\">.scpt</code>-extension to the <code class=\"language-plaintext highlighter-rouge\">osa</code> filter:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>echo \"*.scpt filter=osa\" &gt;&gt; .gitattributes\n</code></pre></div></div>\n\n<p>Now the files can be added to git:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add .gitattributes my_script.scpt\ngit commit -m Initial\n</code></pre></div></div>\n\n<p>Now let‚Äôs change the script by appending <code class=\"language-plaintext highlighter-rouge\">&amp; \", I like your name\"</code> to the say command in the <code class=\"language-plaintext highlighter-rouge\">my-script.scpt</code> file. Don‚Äôt forget to save.</p>\n\n<p>Now when you run <code class=\"language-plaintext highlighter-rouge\">git diff</code>, you can see the changes you made as you would with text-files. You don‚Äôt need to stick with the command-line: I can confirm it works with GitHub Desktop. It should also work with other GUI‚Äôs, but I haven‚Äôt tested this.</p>\n\n<h1 id=\"not-only-applescript\">Not only AppleScript</h1>\n<p>The program is called <a href=\"https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/osa.html\" title=\"The Open Scripting Architecture (OSA) provides a standard and extensible mechanism for interapplication communication in OS X.\">osa</a>gitfilter, so you can also add JavaScript <code class=\"language-plaintext highlighter-rouge\">.scpt</code>-files. There is also a feature that prevents you from accidently adding AppleScript-debugger files to git (a special file format used by the indispensible <a href=\"scriptdebugger\">Script Debugger</a>).</p>\n\n<p>I hope osagitfilter will be useful tool. It will not completely replace the first two methods, but it‚Äôs nice to have an alternative to them.</p>\n\n<p>Let me know what you think on <a href=\"https://twitter.com/doekezanstra/status/1125696216573140993\">twitter</a> or <a href=\"https://forum.latenightsw.com/t/a-third-way-of-putting-applescript-into-git/1932?u=doekman\">at this thread</a> on Late Night Software‚Äôs AppleScript forum.</p>\n\n",
			"summary": "There are currently two ways of putting AppleScript into git. First is just by adding the binary .scpt-files. You don‚Äôt get much benefit from using git, but it works.",
			"date_published": "2019-05-06T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2019/03/08/Git-Url",
			"url": "https://blog.zanstra.com/2019/03/08/Git-Url.html",
			"title": "git-url",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>A while ago, <a href=\"https://gist.github.com/doekman/45acdb0ceedd9dc9dc6105d0b058b06a\">I created a shell script</a> called <code class=\"language-plaintext highlighter-rouge\">git-url</code>. It prints the remote origin URL of your current git-repository (or exit 1 if no git-repo is found). If the URL is in <code class=\"language-plaintext highlighter-rouge\">git:</code> format, it is converted to <code class=\"language-plaintext highlighter-rouge\">http:</code> format.</p>\n\n<p>Why would one write this? Because of <code>open `git-url`</code>.</p>\n\n<p>This will open the GitHub- or BitBucket-repository in your favorite browser. I use it all the time!</p>\n\n<p>Above works on macOS. Windows uses <code class=\"language-plaintext highlighter-rouge\">start</code> instead of <code class=\"language-plaintext highlighter-rouge\">open</code>, but I don‚Äôt know how it works with Windows Subsystem for Linux.</p>\n\n<p><strong><em>Updated 2019-12-04</em></strong>: you now can add a SHA1 hash to go directly to that commit in the browser (GitHub and BitBucket) like\n<code>open `git-url 7593e1a`</code>, which <a href=\"https://github.com/doekman/doekman.github.io/commit/7593e1a631df4769853948b31b610a13a4525665\">opens this link</a>).</p>\n\n",
			"summary": "A while ago, I created a shell script called git-url. It prints the remote origin URL of your current git-repository (or exit 1 if no git-repo is found). If the URL is in git: format, it is converted to http: format.",
			"date_published": "2019-03-08T00:00:00+01:00",
			"tags": ["cli"]
		},
		 {
			"id": "/2018/12/31/iOS_ethernet",
			"url": "https://blog.zanstra.com/2018/12/31/iOS_ethernet.html",
			"title": "Networking with iOS via Ethernet",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>This summer I went to <a href=\"https://www.ecolonie.eu/en\">Ecolonie</a>, a very nice place in <strong>France</strong>. It is an idealistic place that doesn‚Äôt want to exclude anyone.\nSo they don‚Äôt allow digital wireless connections like Wifi and Bluetooth, because this can make some people sick.</p>\n\n<p>So I thought of connecting my iPad via Ethernet to internet.\n<a href=\"https://www.lifewire.com/connect-ipad-to-wired-ethernet-port-1994242\">I‚Äôm not</a> <a href=\"https://sixcolors.com/post/2016/07/ios-10-a-place-for-ethernet/\">the first one</a> <a href=\"https://9to5mac.com/2017/03/01/ios-10-2-ethernet-adapter-ui-settings-app/\">to try this</a>, but I wanted to share my experiences.\nI first bought the <a href=\"https://www.apple.com/nl/shop/product/MK0W2ZM/A/lightning-naar-usb-3-camera-adapter?fnode=5a77c06a31d0e5022a688a2defec8127910a5c967ad27547e77a7424219ab7f0a55463cd85fcdd333d6606c4fa120dfcc8c4531e057b6b3771cf23ba049aaa7807f3e771f4c29345bec09a21c843c02ccb64fe33ce5ec4bf8ae31ebbf3f1d902\">Apple Lightning to USB 3 camera adapter</a> (you can get cheaper clones, but non-Apple periferals can suffer from some kind of compatiblity issue).\nNext was a <a href=\"https://www.amazon.de/gp/product/B00QWYJSUG/ref=oh_aui_detailpage_o00_s01?ie=UTF8&amp;psc=1\">powered USB hub</a> from the Aukey, which already has an ethernet LAN adapter build in!\nSo there‚Äôs no need to buy an external USB Ethernet Adapter.</p>\n\n<p>This setup works (almost) perfectly with both iPhone 5 (iOS 10.3.3), iPhone SE and iPad Air 2 (both iOS 11.4.1).\nI didn‚Äôt test my original iPad, since I don‚Äôt have a camera adapter with a <a href=\"https://en.wikipedia.org/wiki/Dock_connector\">dock connector</a>.</p>\n\n<p>When connecting the setup, you‚Äôll get an entry between Wifi and Bluetooth in the settings menu, where you can check your TCP/IP settings.\nWhen I plugged in my Apple USB Ethernet Adapter, the Ethernet menu shows two adapters (also one for the build-in Aukey ethernet).\nLike in macOS, it will prioritize the adapters automatically and choose the ‚Äúbest‚Äù one.\nI performed some speed tests, and I didn‚Äôt find significant differences between Wifi and Ethernet.</p>\n\n<p>I found one downside which stops it from working perfectly. I switch on Airplane Mode to make sure no digital wireless signals were emitted.\nHowever, in that case for almost every app you open, you‚Äôll get a warning to switch off Airplane Mode.\nLuckily these warnings can be dismissed without any problems, and bytes will happily flow between your device and the internet.</p>\n\n<p>Other findings: I charged by iPad via a cable between the lightning connector in the Camera Adapter and the fast-charge port in the USB hub.\nThis caused noise on the speaker I had connected to the iPad via the 3¬Ωmm audio jack.\nThe noise disappeared when removing the charging cable from the USB hub and did not return when connecting to iPad‚Äôs charging adapter.</p>\n\n<p>One final note on USB Ethernet adapters: naturally they have built-in MAC-addresses. But you can expect some complications on your network when you use a MAC-addresses to identify all allowed devices.\nDevices, like in Lisa‚Äôs tablet and Bart‚Äôs iPhone‚Ä¶ D‚Äôoh!</p>\n\n",
			"summary": "This summer I went to Ecolonie, a very nice place in France. It is an idealistic place that doesn‚Äôt want to exclude anyone.So they don‚Äôt allow digital wireless connections like Wifi and Bluetooth, because this can make some people sick.",
			"date_published": "2018-12-31T00:00:00+01:00",
			"tags": ["does-it-work"]
		},
		 {
			"id": "/2018/09/13/Jump-around",
			"url": "https://blog.zanstra.com/2018/09/13/Jump-around.html",
			"title": "Jump around",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><style>code {white-space:nowrap;}</style>\n\n<p>There are more ways <a href=\"https://scriptingosx.com/2017/08/navigating-the-file-system/\">to navigate the file system</a> in <em>bash</em> than I imagined when I still was using <em>cmd.exe</em>. Let me name some:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">cd</code> navigates to the home folder. Like <code class=\"language-plaintext highlighter-rouge\">cd /users/$(whoami)</code> or <code class=\"language-plaintext highlighter-rouge\">cd \"$HOME\"</code> but shorter.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">cd -</code> navigates to the previous directory. It‚Äôs like the <em>zap-button</em> on your television remote control!</li>\n  <li><code>cd ~/Doc<span title=\"HORIZONTAL TABULATION\">‚êâ</span></code> <em>tab-completion</em> works like Visual Studio‚Äôs intelli-sense, but without the dropdown and it‚Äôs case sensitive. If there is one choice, it will complete it. If there is more, you need to press <abbr title=\"‚êâ or Horizontal Tab\">tab</abbr> twice, and it will show a list.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">pushd</code>/<code class=\"language-plaintext highlighter-rouge\">popd</code>/<code class=\"language-plaintext highlighter-rouge\">dirs</code> save/load/show a directory to/from the stack. Especially handy in complex scripts.</li>\n</ul>\n\n<p>However, I noticed I was always navigating to not that many different number of folders. I thought, wouldn‚Äôt it be handy if one could save/load folders to some kind of <a href=\"https://en.wikipedia.org/wiki/Associative_array\" title=\"In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection\">dictionary</a>. I did extensive research and couldn‚Äôt find anything, so I created <a href=\"https://github.com/doekman/go\">go</a>. It was great. Typing <code class=\"language-plaintext highlighter-rouge\">go gh</code> performed <code class=\"language-plaintext highlighter-rouge\">cd ~/prj/GitHub</code>. To save the current folder under the name <em>‚Äúhere‚Äù</em> would be performed by <code class=\"language-plaintext highlighter-rouge\">go here .</code>. And <code class=\"language-plaintext highlighter-rouge\">go</code> would show all the current stored definitions.</p>\n\n<p>As I mentioned before, I performed thorough extensive research. I didn‚Äôt take it lightly. However. Apperently, the subject sometimes needs time to sink in. As today I learned from <a href=\"http://www.secretgeek.net/pp2018\">a guy I have known some time</a>, that he created a tool called <a href=\"https://github.com/secretGeek/markjump\">markjump</a>. This is basically what I made, only for <em>powershell</em>. But his work was inspired by <a href=\"http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html\">Jeroen Janssens‚Äô</a> <em>shell script</em>, from five years ago. And he‚Äôs a Dutchie too! How could I have missed that? And his code is 1500% better!</p>\n\n<p>To complete my story line: Half a year ago I ran into the <a href=\"https://github.com/rupa/z/\">z-utility</a> (can‚Äôt remember how), which has the description <a href=\"https://en.wikipedia.org/wiki/Jump_Around\">jump</a> <a href=\"https://www.youtube.com/watch?v=XhzpxjuwZy0\">around</a>. I was intrigued! I learnt descriptions of utilities are pretty important. And it turns out to be a pretty clever and helpful utility. It automatically remembers where you navigate to; no need to keep a list manually. And it will also keep <em>statistics</em>.</p>\n\n<p>It uses <em>regular expressions</em> to find which folder you want to navigate to. And it‚Äôs case-insensitive, so <code class=\"language-plaintext highlighter-rouge\">z dow</code> will navigate to <code class=\"language-plaintext highlighter-rouge\">~/Downloads</code>. No need to type a capital-D. When the regular expression matches multiple folders, it uses the statistics (how recent and how frequent) to decide where to navigate to.</p>\n\n<p>I must say I was a bit hesitant to use it, because it seemed so‚Ä¶ technical. In the beginning of the man-page it says something like <em>‚ÄúTracks your most used directories, based on ‚Äòfrecency‚Äô..‚Äù</em> But the <em>‚Äújump around‚Äù</em> reeled me in. I never used my own <code class=\"language-plaintext highlighter-rouge\">go</code>-utility, and only just now looked back. Thanks <a href=\"https://github.com/rupa\">rupa</a>!</p>\n\n",
			"summary": "",
			"date_published": "2018-09-13T00:00:00+02:00",
			"tags": ["cli"]
		},
		 {
			"id": "/2018/08/28/Missing-emoji",
			"url": "https://blog.zanstra.com/2018/08/28/Missing-emoji.html",
			"title": "Emoji's missing from emojis.wiki",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>The following entries are supposedly missing from <a href=\"https://emojis.wiki\">emojis.wiki</a>. However, you could also read this article as a proposal for alternate descriptions of a part of the <a href=\"https://en.wikipedia.org/wiki/Miscellaneous_Technical#(2340‚Äì237F)\">Miscellaneous Technical range</a> of the <a href=\"https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane\">Basic Multilingual Plane</a> of the <a href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode</a> standard.</p>\n\n<style>\n\tbig  { font-size:150%; line-height:100%; cursor:help;}\n</style>\n\n<ul style=\"list-style-type:none\">\n\t<li title=\"U+2361: APL FUNCTIONAL SYMBOL UP TACK DIAERESIS\">     <big>‚ç°</big> Chin on fist on arm</li>\n\t<li title=\"U+2362: APL FUNCTIONAL SYMBOL DEL DIAERESIS\">         <big>‚ç¢</big> Super happy</li>\n\t<li title=\"U+2363: APL FUNCTIONAL SYMBOL STAR DIAERESIS\">        <big>‚ç£</big> Moustache concealing mouth</li>\n\t<li title=\"U+2364: APL FUNCTIONAL SYMBOL JOT DIAERESIS\">         <big>‚ç§</big> Disbelieve</li>\n\t<li title=\"U+2365: APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS\">      <big>‚ç•</big> Big surprise</li>\n\t<li title=\"U+2368: APL FUNCTIONAL SYMBOL TILDE DIAERESIS\">       <big>‚ç®</big> Unsure</li>\n\t<li title=\"U+2369: APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS\"><big>‚ç©</big> Talking frolicsome</li>\n</ul>\n\n<p>If you have any corrections or addendums, please let me know on Twitter.</p>\n\n",
			"summary": "The following entries are supposedly missing from emojis.wiki. However, you could also read this article as a proposal for alternate descriptions of a part of the Miscellaneous Technical range of the Basic Multilingual Plane of the Unicode standard.",
			"date_published": "2018-08-28T00:00:00+02:00",
			"tags": []
		},
		 {
			"id": "/2018/07/08/Vowel-case",
			"url": "https://blog.zanstra.com/2018/07/08/Vowel-case.html",
			"title": "To vowel case",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>There already was <em>Sentence case</em>, <em>lower case</em>, <em>UPPER CASE</em>, <em>Capitalized Case</em>, <em>AlTeRnAtInG CaSe</em> and <em>Title Case</em>.</p>\n\n<p><strong>And nOw YOU cAn dO vOwEr cAsE tOO</strong>!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function toVowelCase(text) {\n  return text.toLowerCase().replace(/[aeiouy]+/g, match =&gt; match.toUpperCase());\n}\n</code></pre></div></div>\n\n<p><strong>Updated</strong>: <em>a correct implementation of <code class=\"language-plaintext highlighter-rouge\">toVowelCase</code> is locale-dependend. In English, the letter <code class=\"language-plaintext highlighter-rouge\">y</code> is sometimes a vowel, and at other times a consonant.  The above works for the Dutch language and some other languages. Your mileage may vary.</em></p>\n\n<p><strong>Updated</strong>: bookmarking <a href=\"https://headlinecapitalization.com\">https://headlinecapitalization.com</a> and <a href=\"https://titlecaseconverter.com\">https://titlecaseconverter.com</a>.</p>\n",
			"summary": "There already was Sentence case, lower case, UPPER CASE, Capitalized Case, AlTeRnAtInG CaSe and Title Case.",
			"date_published": "2018-07-08T00:00:00+02:00",
			"tags": ["one-liner"]
		},
		 {
			"id": "/2018/06/29/Refactoring",
			"url": "https://blog.zanstra.com/2018/06/29/Refactoring.html",
			"title": "To refactor, or not to refactor",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>The code iteration below is a contemporary comment on the use of refactoring.<br />\nWe start with this code:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n  if (year % 4) {\n    return false;\n  } else {\n    if (year % 100) {\n      return true;\n    } else {\n      if (year % 400)\n        return false;\n      else return true;\n    }\n  }\n}\n</code></pre></div></div>\n\n<p>All code has to be <a href=\"https://github.com/jasmine/jasmine\">unit tested</a>, so we write this (<em>normally I start with this before writing actual code, but you know‚Ä¶</em>):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function unitTests() {\n  describe(\"leapYear tests\", function() {\n    expect(isLeapYear(1900)).toBe(false);\n    expect(isLeapYear(1971)).toBe(false);\n    expect(isLeapYear(1972)).toBe(true);\n    expect(isLeapYear(2000)).toBe(true);\n    expect(isLeapYear(2003)).toBe(false);\n  });\n}\n</code></pre></div></div>\n\n<p>And to stay very agile, I wrote some minimal unit testing ‚Äúlibrary‚Äù (<a href=\"http://agilemanifesto.org\">individuals over tools</a>, anyone?):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function describe(testName, tests) {\n    var groupTitle = 'Name: '+testName+' - Start: '+(new Date).toISOString();\n    console.group(groupTitle);\n    expect.nr = 0;\n    expect.errors = 0;\n    tests();\n    if (expect.errors == 0) console.info('All %s tests OK', expect.nr);\n    else console.error('%s of %s tests failed', expect.errors, expect.nr);\n    console.groupEnd(groupTitle);\n}\n\nfunction expect(x) {\n    return {\n        toBe: function(y) {\n            if (x === y) console.info(\"%s: OK üëç\", expect.nr++);\n            else console.error(\"%s: Error üëπ\", expect.nr++), expect.errors++;\n        }\n    };\n}\n</code></pre></div></div>\n\n<p>The unit tests all passed. Can‚Äôt wait to start with refactor step 1: removing unnecessary nesting. One step at a time.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    if (year % 4) {\n        return false;\n    }\n    if (year % 100) {\n        return true;\n    }\n    if (year % 400) {\n        return false;\n    }\n    return true;\n}\n</code></pre></div></div>\n\n<p>Yes‚Ä¶, much better! All tests pass. Refactor step 2, fold down into one if:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    if (year % 4 || (!(year % 100) &amp;&amp; year % 400)) {\n        return false;\n    }\n    return true;\n}\n</code></pre></div></div>\n\n<p>And for the heck of it, remove the unnecessary if as well:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    return !(year % 4 || (!(year % 100) &amp;&amp; year % 4000));\n}\n</code></pre></div></div>\n\n<p>Oopsy. The fourth test failed. Just a typo, no worries. And since there‚Äôs already too much negativity around, I‚Äôll fix that in the next iteration, and while we are at it, move the negation to another function.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    return !isCommonYear(year);\n}\nfunction isCommonYear(year) {\n    return year % 4 || (!(year % 100) &amp;&amp; year % 400);\n}\n</code></pre></div></div>\n\n<p>The committee unanimously decided: don‚Äôt rely on javascript‚Äôs truthiness, we want explicit code! So fixing that:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    return !isCommonYear(year);\n}\nfunction isCommonYear(year) {\n    return year % 4 != 0 || (!(year % 100 != 0) &amp;&amp; year % 400 != 0);\n}\n</code></pre></div></div>\n\n<p>Refactor step 6, the overload of negativity was back. Fixing:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    return !isCommonYear(year);\n}\nfunction isCommonYear(year) {\n    return year % 4 != 0 || (year % 100 == 0 &amp;&amp; year % 400 != 0);\n}\n</code></pre></div></div>\n\n<p>Refactor step 7 should be a charm. I still don‚Äôt like the code at all, so f$*# it, just use the native function:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function isLeapYear(year) {\n    return new Date(year, 2 - 1, 29).getDate() == 29;\n}\n</code></pre></div></div>\n\n<p>Done!</p>\n\n<p>Code can also be found <a href=\"https://github.com/doekman/to-refactor...\">here on GitHub</a>.</p>\n\n",
			"summary": "The code iteration below is a contemporary comment on the use of refactoring.We start with this code:",
			"date_published": "2018-06-29T00:00:00+02:00",
			"tags": ["refactor"]
		},
		 {
			"id": "/2017/05/19/JSON-feed",
			"url": "https://blog.zanstra.com/2017/05/19/JSON-feed.html",
			"title": "Jekyll template for JSON Feed",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>When I learned about <a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">JSON Feed</a>, I immediately liked the idea. It‚Äôs like RSS/Atom, with the good parts (it‚Äôs de-central) and without the bad parts (no more XML, well thought of standard attributes).</p>\n\n<p>I‚Äôm not to sure how it will be used in practise, but it was easy enough to create a Jekyll template (<a href=\"https://github.com/doekman/doekman.github.io/blob/master/feed.json\" title=\"Source code on GitHub\">source on GitHub</a>). I learned it‚Äôs handy to add a <code class=\"language-plaintext highlighter-rouge\">base</code>-tag to the <code class=\"language-plaintext highlighter-rouge\">content_html</code>-attribute, after trying <a href=\"http://json-feed-viewer.herokuapp.com\">this app</a>.</p>\n\n<p>And I made myself a <a href=\"http://json-feed-viewer.herokuapp.com/?feed_url=http%3A%2F%2Fblog.zanstra.com%2Ffeed.json\">nice square logo</a> too.</p>\n\n",
			"summary": "When I learned about JSON Feed, I immediately liked the idea. It‚Äôs like RSS/Atom, with the good parts (it‚Äôs de-central) and without the bad parts (no more XML, well thought of standard attributes).",
			"date_published": "2017-05-19T00:00:00+02:00",
			"tags": ["meta"]
		},
		 {
			"id": "/2017/05/14/JSON-the-game-nr2",
			"url": "https://blog.zanstra.com/2017/05/14/JSON-the-game-nr2.html",
			"title": "JSON, the game #2: The parsings",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>For some reason, I imagined the next step in the development of the game was to make the ‚Äòblock‚Äô move. Like up and down, and sliding to the left. For <a href=\"http://agilemanifesto.org\">agile</a> reasons, I want to make progress that is reflected and visible in the software. So no spending time at writing libraries first. You probably end up writing stuff you don‚Äôt even need. But when starting, I realized the partial-JSON part needed to be worked on first.</p>\n\n<p>To display the partial-JSON, I need a <em>model</em> of that JSON. That model should be capable of annotating the partial-JSON with grammar issues (like missing bracket/comma, incomplete strings or just plain errors). Indentation should be addressed too. Also some dimension-data is needed, so we can determine whether the block can move up/down and when it has reached the partial-JSON surface (sorry, I can‚Äôt stop thinking in planet metaphors).</p>\n\n<p>When pondering on these requirements, I realized a tokenizer/parser was necessary. A library! Not very agile, right? Perhaps skipping the grammar issues first and add it later would have been a wiser choice. We will never know. Writing a parser does takes some time, but it <a href=\"http://zanstra.com/my/RegexMate.html\">sure</a> <a href=\"https://cdn.rawgit.com/doekman/base2/7466e0d79d4f049dfb07e44b78f9e4c23a2ec9f0/src/utils/Parsers/samples/Uri.html\">is</a> <a href=\"https://cdn.rawgit.com/doekman/base2/7466e0d79d4f049dfb07e44b78f9e4c23a2ec9f0/src/utils/Parsers/samples/GWParser.html\">fun</a>.</p>\n\n<p>First I started writing a <a href=\"https://github.com/doekman/Json-the-Game/blob/61fcc2afed7bc6647ebd07510dd8af5f59d5960a/json_parser.js\" title=\"Source-code at GitHub, first version\">tokenizer</a>. And since it‚Äôs not your average code, I used the most annoying coding convention I could think of. I learned this style with Turbo Pascal in my BBS days. Years later I discovered you can use it with languages like JavaScript, CSS, C# and even PL/SQL. But it‚Äôs too annoying for everyday use. Not only do you get <em>The Eye</em> from your colleagues; every editor I‚Äôve tried actively works against you by messing up the indentation. Again, and again. With. Every. Single. Edit.</p>\n\n<p>The tokenizer splits the JSON into tokens like a string, boolean value or comma. With the parser we then can reason about tokens instead of characters, which makes life much simpler. Because we work with partial JSON, the tokenizer is made to recognizes unfinished strings and other values. Every token has an <code class=\"language-plaintext highlighter-rouge\">is_complete</code>-attribute, so when rendering we can show if a brace is missing, or a string is unfinished.</p>\n\n<html><center style=\"margin-bottom:1em\"><img src=\"/images/json-state-machine.jpg\" alt=\"HTML/CSS mock\" title=\"HTML/CSS mock: the 'ue' token will go from the right to the left\" /></center></html>\n\n<p>The parser was a dragon to me. I made a lot of diagrams to create a <a href=\"https://en.wikipedia.org/wiki/Finite-state_machine\">state machine</a>, see above, and played with <a href=\"http://webgraphviz.com\">GraphViz</a> (which is pretty cool, and a little weird). Finally I thought the state machine was right, and started coding. After writing some unit tests and identifying some failures, I did realize I went in the wrong direction. A state machine is apparently not the best solution to parse JSON and the answer was right in front of me. While I was focussing on the  nice flow diagram at <a href=\"http://json.org\">json.org</a> (which I coincidently also knew from the Turbo Pascal manual; I know, grandpa speaking), the program I needed to write was listed as an inset on the right of that same web page! <code class=\"language-plaintext highlighter-rouge\">object := {} | { members }</code>‚Ä¶ Elementary, dear Watson‚Ä¶</p>\n\n<p>A well, <a href=\"https://www.youtube.com/watch?v=AWwQsdHMT7Y\" title=\"Adventures in Failure, by MC 900ft Jesus\">adventures in failure</a>. Start all over, and everything will be fine. At the moment, I have a validating parser (<a href=\"https://github.com/doekman/Json-the-Game/tree/c6f9cdfd302df48813c9a1f86a85d53b45f68303\" title=\"Tokenizer &amp; validating parser\">source here</a>). It says whether the JSON is correct or not. There are still loose ends, which I will fix when needed. For example, I ignored Unicode for a big part and focussed on ASCII for now.</p>\n\n<p>On a side note: I also wanted to check out those new <a href=\"http://es6-features.org/\">EcmaScript 2016 features</a>, since every browser seems to be <a href=\"http://kangax.github.io/compat-table/es6/\">supporting them</a>. It‚Äôs nice to see the language is evolving, after multiple timespans of stagnation. The best feature IMHO is string interpolation.</p>\n\n<p>Next step is adding code to the parser for annotating tokens, and insert <code class=\"language-plaintext highlighter-rouge\">missing</code>-tokens. And render the thing in HTML naturally.</p>\n\n",
			"summary": "For some reason, I imagined the next step in the development of the game was to make the ‚Äòblock‚Äô move. Like up and down, and sliding to the left. For agile reasons, I want to make progress that is reflected and visible in the software. So no spending time at writing libraries first. You probably end up writing stuff you don‚Äôt even need. But when starting, I realized the partial-JSON part needed to be worked on first.",
			"date_published": "2017-05-14T00:00:00+02:00",
			"tags": ["game"]
		},
		 {
			"id": "/2017/04/30/JSON-the-game-nr1",
			"url": "https://blog.zanstra.com/2017/04/30/JSON-the-game-nr1.html",
			"title": "JSON, the game #1: Bootstrapping it",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Around a year ago, I had the daft idea to create some nerdy JSON-game. I had good fun thinking about some concepts, made some notes, and that was about it. Until now that is. The game: It‚Äôs coming‚Ä¶ It has already started. To keep me focussed, I will keep a journal of the creation, and you‚Äôre reading the first part.</p>\n\n<p>I got the ideas from series like the Brent Simmons‚Äôs <a href=\"http://inessential.com/vespersyncdiary\">Vesper Sync Diary</a> and Jon Skeet‚Äôs <a href=\"https://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/\">Reimplementing Linq to Objects</a>. I found them enjoyable; a bit of a nerdy soap opera. And now is the time for me to get of my comfy sofa and produce some soap of my own.</p>\n\n<p>The idea of the game: <a href=\"http://json.org\">JSON</a> tokens are coming in, and you need to place them correctly. The initial form of the game will be Tetris-like with your head on your right shoulder: the tokens come in from the right and go to the left (alternative gravity you can think). However, this form might change from level to level (I‚Äôm thinking of the partial JSON document as a starship, crashing into JSON stars/tokens as it cruises through the JSON universe).</p>\n\n<p>The first step is to create some user interface mockup. A guy gotta start somewhere. My weapon of choice is HTML/CSS. At the top we have a dashboard providing some game details. Unformatted JSON will do for now. The playing field (where the partial JSON is) will have a fixed width, while the height might grow during gameplay when tokens are inserted between lines.</p>\n\n<html><center style=\"margin-bottom:1em\"><img src=\"/images/json-html-mock.png\" alt=\"HTML/CSS mock\" title=\"HTML/CSS mock: the 'ue' token will go from the right to the left\" /></center></html>\n\n<p>Positioning is done with the <code class=\"language-plaintext highlighter-rouge\">em</code> and <code class=\"language-plaintext highlighter-rouge\">ch</code> CSS units with a position <code class=\"language-plaintext highlighter-rouge\">relative</code>/<code class=\"language-plaintext highlighter-rouge\">absolute</code> container-combo, so I can  position things absolute within the relative container. Every character is one <code class=\"language-plaintext highlighter-rouge\">ch</code> and every line is one <code class=\"language-plaintext highlighter-rouge\">em</code>. One little problem though: <code class=\"language-plaintext highlighter-rouge\">em</code> is font-height, not line-height. And a line-height of 100% just doesn‚Äôt look right. But there is no such thing as a line-height unit. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length#Font-relative_lengths\" title=\"Line-height unit ln; unimplemented with an unknown specification\">Or is there?</a>) This is easy fixable with a calculation, but line-height will appear in multiple places in CSS.</p>\n\n<p>Also some color coding needs to be added, so we can identify unbalanced grouping tokens, missing separators, incomplete tokens and downright errors. That‚Äôs why I‚Äôm not using a <code class=\"language-plaintext highlighter-rouge\">pre</code>-element. I don‚Äôt have a definite idea about gameplay, but some ideas come to mind. An obvious solution for an error would be ‚ÄúGame over‚Äù. This can also be postponed by counting ‚Äúlives‚Äù. The error will vanish and you loose a life. Or an error could be cleared with the incoming JSON token <code class=\"language-plaintext highlighter-rouge\">\\b</code>. That choice will depend on the level. But I digress.</p>\n\n<p>This is not all markup we need (we will need a dialog-box, for the start and end of a level), but it will do for now. I put the <a href=\"https://github.com/doekman/Json-the-Game/tree/8f14c49ec871a35cbb85d2d0b0e751ea054489c5\">source-code on GitHub</a>, and every instalment will point to a commit so you can see how this game comes to shape. You can also <a href=\"https://cdn.rawgit.com/doekman/Json-the-Game/8f14c49ec871a35cbb85d2d0b0e751ea054489c5/index.html\">‚Äúrun‚Äù the game here</a> (nothing to play for now).</p>\n\n<p>I hope to find a good balance between enjoyability, a bit of fun and some technical remarks. And I like to hear your thoughts on <a href=\"https://twitter.com/doekezanstra\">Twitter</a>.</p>\n\n<p>The next instalment will be about moving those incoming tokens.</p>\n\n",
			"summary": "Around a year ago, I had the daft idea to create some nerdy JSON-game. I had good fun thinking about some concepts, made some notes, and that was about it. Until now that is. The game: It‚Äôs coming‚Ä¶ It has already started. To keep me focussed, I will keep a journal of the creation, and you‚Äôre reading the first part.",
			"date_published": "2017-04-30T00:00:00+02:00",
			"tags": ["game"]
		},
		 {
			"id": "/2016/09/08/Only-my-warnings",
			"url": "https://blog.zanstra.com/2016/09/08/Only-my-warnings.html",
			"title": "Only my warnings",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Don‚Äôt you hate to be put in a situation like the following?</p>\n\n<blockquote>\n  <p>You are assigned by your company to add some functionality to some software at\nsome client. The client has standards and practices in place stating you can‚Äôt checkin code that produces warnings, only to find\nout that a clean checkout produces loads of warnings when building!</p>\n\n  <p>But you can‚Äôt fix <span style=\"font-style:normal\">üò¢</span> those warnings. You, the super star programmer‚Ñ¢ (whose boss is getting\npaid big dollars for high quality, virtually bug-free software), cannot get rid of those pesky lines of inability‚Ä¶</p>\n\n  <p>For starters, why judge those warnings in the first place. You‚Äôre just the new guy, you don‚Äôt want to get into any trouble. Also, \nby solving warnings, you may introduce new bugs (even though you‚Äôre super competent, after all creating bugs is just a matter of probability). \nNobody wants that! And finally, you‚Äôre a professional. The client is only paying for the new functionality, not for you to clean\nup the place. And about your collegues, you don‚Äôt want to hurt anyones feelings. \nSo in short: the man says no. No way fixing those warnings, Jos√©!</p>\n</blockquote>\n\n<p>Situations like these inspired us to envision a new kind of solution to those issues at hand. Let me introduce to you, without further ado, the Visual Studio extension <strong>Only My Warnings</strong>.</p>\n\n<p>When your solution is under source control a new list button is added to the Error List pane, with the options <em>All</em>, <em>Only Mine</em> and <em>Local Only</em>. \nWith the option <em>Local Only</em> selected, the pane will only show errors, warnings and messages caused by local changes, i.e. by you!\nAll other messages are hidden, so you don‚Äôt have to deal with them. Victory!</p>\n\n<p><img src=\"/images/Only-my-warnings_error-list.png\" alt=\"screen shot\" title=\"Error List window from Visual Studio 2015 Community Edition\" /></p>\n\n<p>The extension doesn‚Äôt get in the way; it only adds this one list button.\nWhen selecting <em>Only Mine</em>-option, the tool will gather all messages from your checkins, and show only the messages caused by you. \nAnd it follows branches, so you can focus at the feature that is imporant at any given moment.</p>\n\n<p>Now you can be productive, and still have a chat with your collegues without having an argument! While using this extension, you\nwill contribute to your team‚Äôs productivity. You will be a team productivity enabler! That‚Äôs how 10√ó developers are bred!\nIn a way, <em>only my warnings</em> contributes to world peace.</p>\n\n<p>For now, the extension is still in its early alpha phase. If you want to participate in the beta-program, or want to get notified\nwhen the extention will be released to the Visual Studio Gallery, please \n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLScMYh6JqrQn-dEA8hzIGJdJsV5-9ufCuTkfczPeXlBjNoB7KA/viewform\">fill out this form</a>.</p>\n\n<p>(this is a blog post in the series: I‚Äôm perfect, communicate better with tools)</p>\n",
			"summary": "Don‚Äôt you hate to be put in a situation like the following?",
			"date_published": "2016-09-08T00:00:00+02:00",
			"tags": ["tools"]
		},
		 {
			"id": "/2016/03/06/Console-log-adventure",
			"url": "https://blog.zanstra.com/2016/03/06/Console-log-adventure.html",
			"title": "A console.log() adventure; pimped",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>Over a year ago, my interwebfriend <a href=\"https://twitter.com/secretGeek\">secretGeek</a> created a thing. I created a fork, and pimped it <a href=\"https://rawgit.com/doekman/console-adventure/master/console.html\">into this</a> (<em>and copied some of his blog lines too</em>). I urge you to go and try it out before you read on. Unfortunately you‚Äôll need to be on a desktop computer, not a mobile phone.</p>\n\n<p><a href=\"https://rawgit.com/doekman/console-adventure/master/console.html\"><img src=\"/images/console_best.png\" style=\"border:8px solid #333;box-shadow:3px 3px 7px #888\" title=\"a console.log() adventure.\" /></a></p>\n\n<p><a href=\"https://rawgit.com/doekman/console-adventure/master/console.html\">Go there now</a>.</p>\n\n<p>In case you don‚Äôt have a desktop computer anymore (woah, futuristic!), or have already tried it out, I‚Äôll give some spoilers and discussion now.</p>\n\n<h1 id=\"spoilers\">Spoilers</h1>\n\n<p>Actually, I‚Äôll give some space before the spoilers. Scroll now for spoilers.</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>‚Üì spoilers ahead ‚Üì</p>\n\n<p>Here is <a href=\"http://www.secretgeek.net/console_log\">secretGeek‚Äôs blog-entry</a>. When playing the game I had loads of fun. \nKeeping a map on graph paper, just to make sure the map is deterministic and doesn‚Äôt use some random numbers. \nAfter some more playing, I started looking at the code and wanted to tinker with it. So I forked it. I had some wild and interesting ideas.</p>\n\n<p>But somehow, nothing happened.</p>\n\n<p>I guess I was overthinking it. A year later, I remembered one time at work while being bored, I created the so called <a href=\"https://zanstra.com/arc/xs4all/dds.arc/miniwebventure/index.htm\" title=\"Originally hosted at http://www.worldaccess.nl/~mobitdz around 1997 I think\">mini-webventure</a>. I didn‚Äôt think too much back then, so why do it now?</p>\n\n<p>So I just started. After running around in the forest (in the game, that is), I got tired of entering parenthesis. And with \n<a href=\"http://ejohn.org/blog/ecmascript-5-objects-and-properties/\">properties</a> around in all browsers nowadays, there‚Äôs no need for it. So instead of typing <code class=\"language-plaintext highlighter-rouge\">n()</code>, you now can enter <code class=\"language-plaintext highlighter-rouge\">n</code> to go north.</p>\n\n<p>An other thing: in a JavaScript game, I don‚Äôt consider inspecting and modifying variables cheating.\nSo I prevented that with an <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">iife</a> and some help of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a> (to eliminate global variables).</p>\n\n<p>Multiple lines are now returned after entering a command, so they are displayed in the same font and color. And deaths \nare a bit more dramatic now. You should really try it, if you haven‚Äôt already‚Ä¶</p>\n\n<p>After dying too often, implementing load/save was next. First I just saved the game state, but then I realized\nthis was another way to cheat, so now only the entered commands are stored. Then I realized, a demo-mode\nis very easy to implement. Couldn‚Äôt resist it, but it‚Äôs hidden somewhere in the game.</p>\n\n<p>I didn‚Äôt want to change the map or story. Just wanted to share the fun I had, both playing and pimping the game.</p>\n\n",
			"summary": "Over a year ago, my interwebfriend secretGeek created a thing. I created a fork, and pimped it into this (and copied some of his blog lines too). I urge you to go and try it out before you read on. Unfortunately you‚Äôll need to be on a desktop computer, not a mobile phone.",
			"date_published": "2016-03-06T13:45:00+01:00",
			"tags": ["refactor","game"]
		},
		 {
			"id": "/2016/01/09/First-post",
			"url": "https://blog.zanstra.com/2016/01/09/First-post.html",
			"title": "First post!",
			"content_html": "<base href=\"https://blog.zanstra.com/\"><p>OK, I started yet another blog.</p>\n\n<p>Here are the predecessors (and thank my <a href=\"https://archive.org/donate/\" title=\"Internet Archive\">public backup service</a> for most of this):</p>\n\n<ul>\n  <li>2006-2011:\n<a href=\"https://web.archive.org/web/20120918224636/http://zanstra.com/base/blog\">http://zanstra.com/base/blog</a>, \n<a href=\"https://web.archive.org/web/20071101024331/http://zanstra.com/base/tag\">archive 1</a> and \n<a href=\"https://web.archive.org/web/20120802022851/http://zanstra.com/base/tag\">archive 2</a> (DokuWiki with plugin)</li>\n  <li>2004-2006: \n<a href=\"https://web.archive.org/web/20080206012725/http://doekman.web-log.nl/\">http://doekman.web-log.nl</a> (hosted)</li>\n  <li>2004-2006: \n<a href=\"https://web.archive.org/web/20061116004043/http://blogger.xs4all.nl/zanstra/\">http://blogger.xs4all.nl/zanstra/</a> (hosted)</li>\n  <li>2002-2006: \n<a href=\"https://zanstra.com/arc/xs4all/logs/jsLog-2004.htm\" title=\"Later: http://zanstra.home.xs4all.nl\">http://www.xs4all.nl/~zanstra/logs/</a>\n<a href=\"https://zanstra.com/arc/xs4all/logs/jsLog.htm\">more entries</a> and \n<a href=\"https://zanstra.com/arc/xs4all/logs/ideaLog.htm\">some idea‚Äôs</a> (<a href=\"https://zanstra.com/arc/xs4all/logs/gen.bat.txt\">batch-file</a>)</li>\n</ul>\n\n<p>I also have a Tumblr micro-blogging thing called <a href=\"https://www.tumblr.com/blog/dd3v\" title=\"Doekman Dev\">dd3v</a>, and I used to have a micro blogging service on <em>doekman.micro.blog</em> backed via Kickstarter (<a href=\"/images/archive/doekman.micro.blog.png\">png archive</a> or <a href=\"/images/archive/doekman.micro.blog.pdf\">PDF print</a>).</p>\n",
			"summary": "OK, I started yet another blog.",
			"date_published": "2016-01-09T20:30:00+01:00",
			"tags": ["meta"]
		}
		
	]
}
